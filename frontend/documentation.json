{
    "pipes": [],
    "interfaces": [
        {
            "name": "BackgroundSelectionSubmenuInput",
            "id": "interface-BackgroundSelectionSubmenuInput-1d7d7311ffe51bebe6b4128639db84b0a39cbd9a611b52ae08c9817f54bb812379e221e5cba469c02f3ee70c132b24483a5b79865612f10ac83845c536214cbc",
            "file": "src/app/shared/models/submenuInputOutput.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type SubmenuTypes =\r\n  | 'text-input-submenu'\r\n  | 'confirmation-submenu'\r\n  | 'background-selection-submenu'\r\n  | 'generate-board-submenu'\r\n  | 'color-selection-submenu'\r\n  | 'dropdown-submenu'\r\n  | 'create-board-item-submenu'\r\n  ;\r\n\r\n// Text Input Submenu\r\nexport interface TextInputSubmenuInput {\r\n  title: string;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface TextInputSubmenuOutput {\r\n  text: string;\r\n}\r\n\r\n// Create Board Item Submenu\r\nexport interface CreateBoardItemSubmenuInput {\r\n  title : string\r\n  placeholderText? : string\r\n  buttonText : string\r\n}\r\n// placeholder is optional because having a completely empty text input is allowed\r\n\r\nexport interface CreateBoardItemSubmenuOutput {\r\n  text : string;\r\n}\r\n\r\n// Confirmation Submenu\r\nexport interface ConfirmationSubmenuInput {\r\n  title: string;\r\n  confirmationMessage: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ConfirmationSubmenuOutput {\r\n  confirmationStatus: boolean;\r\n}\r\n\r\n// Background Selection Submenu\r\nexport interface BackgroundSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface BackgroundSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Generate Board Submenu\r\nexport interface GenerateBoardSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface GenerateBoardSubmenuOutput {\r\n  name: string;\r\n  colorId: number | null;\r\n}\r\n\r\n// Color Selection Submenu\r\nexport interface ColorSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ColorSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Dropdown Submenu\r\nexport interface DropdownSubmenuInput {\r\n  title: string;\r\n  dropdownInputLabel: string;\r\n  dropdownItems: { id: string; name: string }[];\r\n  dropdownPlaceholderText: string; //Initial text in dropdown, e.g. 'Pick one of the below...'\r\n  buttonText: string;\r\n}\r\n\r\nexport interface DropdownSubmenuOutput {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\n// Union type for the Submenu Input\r\nexport type SubmenuInput =\r\n  | TextInputSubmenuInput\r\n  | ConfirmationSubmenuInput\r\n  | BackgroundSelectionSubmenuInput\r\n  | GenerateBoardSubmenuInput\r\n  | ColorSelectionSubmenuInput\r\n  | DropdownSubmenuInput\r\n  | CreateBoardItemSubmenuInput;\r\n\r\n// Union type for the Submenu Output\r\nexport type SubmenuOutput =\r\n  | TextInputSubmenuOutput\r\n  | ConfirmationSubmenuOutput\r\n  | BackgroundSelectionSubmenuOutput\r\n  | GenerateBoardSubmenuOutput\r\n  | ColorSelectionSubmenuOutput\r\n  | DropdownSubmenuOutput\r\n  | CreateBoardItemSubmenuOutput;\r\n",
            "properties": [
                {
                    "name": "buttonText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "colorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "colorSelectionHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BackgroundSelectionSubmenuOutput",
            "id": "interface-BackgroundSelectionSubmenuOutput-1d7d7311ffe51bebe6b4128639db84b0a39cbd9a611b52ae08c9817f54bb812379e221e5cba469c02f3ee70c132b24483a5b79865612f10ac83845c536214cbc",
            "file": "src/app/shared/models/submenuInputOutput.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type SubmenuTypes =\r\n  | 'text-input-submenu'\r\n  | 'confirmation-submenu'\r\n  | 'background-selection-submenu'\r\n  | 'generate-board-submenu'\r\n  | 'color-selection-submenu'\r\n  | 'dropdown-submenu'\r\n  | 'create-board-item-submenu'\r\n  ;\r\n\r\n// Text Input Submenu\r\nexport interface TextInputSubmenuInput {\r\n  title: string;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface TextInputSubmenuOutput {\r\n  text: string;\r\n}\r\n\r\n// Create Board Item Submenu\r\nexport interface CreateBoardItemSubmenuInput {\r\n  title : string\r\n  placeholderText? : string\r\n  buttonText : string\r\n}\r\n// placeholder is optional because having a completely empty text input is allowed\r\n\r\nexport interface CreateBoardItemSubmenuOutput {\r\n  text : string;\r\n}\r\n\r\n// Confirmation Submenu\r\nexport interface ConfirmationSubmenuInput {\r\n  title: string;\r\n  confirmationMessage: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ConfirmationSubmenuOutput {\r\n  confirmationStatus: boolean;\r\n}\r\n\r\n// Background Selection Submenu\r\nexport interface BackgroundSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface BackgroundSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Generate Board Submenu\r\nexport interface GenerateBoardSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface GenerateBoardSubmenuOutput {\r\n  name: string;\r\n  colorId: number | null;\r\n}\r\n\r\n// Color Selection Submenu\r\nexport interface ColorSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ColorSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Dropdown Submenu\r\nexport interface DropdownSubmenuInput {\r\n  title: string;\r\n  dropdownInputLabel: string;\r\n  dropdownItems: { id: string; name: string }[];\r\n  dropdownPlaceholderText: string; //Initial text in dropdown, e.g. 'Pick one of the below...'\r\n  buttonText: string;\r\n}\r\n\r\nexport interface DropdownSubmenuOutput {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\n// Union type for the Submenu Input\r\nexport type SubmenuInput =\r\n  | TextInputSubmenuInput\r\n  | ConfirmationSubmenuInput\r\n  | BackgroundSelectionSubmenuInput\r\n  | GenerateBoardSubmenuInput\r\n  | ColorSelectionSubmenuInput\r\n  | DropdownSubmenuInput\r\n  | CreateBoardItemSubmenuInput;\r\n\r\n// Union type for the Submenu Output\r\nexport type SubmenuOutput =\r\n  | TextInputSubmenuOutput\r\n  | ConfirmationSubmenuOutput\r\n  | BackgroundSelectionSubmenuOutput\r\n  | GenerateBoardSubmenuOutput\r\n  | ColorSelectionSubmenuOutput\r\n  | DropdownSubmenuOutput\r\n  | CreateBoardItemSubmenuOutput;\r\n",
            "properties": [
                {
                    "name": "colorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BoardRequestBase",
            "id": "interface-BoardRequestBase-ecbe83f92660b78eaff4ab5b7a84da88f59f4a2667be72591558617a79be4d0235ef4e1c1ec676c55370bb54c208b109400d1a724d3c8157a06a2ff7024a4879",
            "file": "src/app/shared/models/board.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GetBoardFullDetailsResponse {\r\n  id: number;\r\n  name: string;\r\n  auth0Id: string;\r\n  colorId : number | null;\r\n  lists: {\r\n    id: string;\r\n    name: string;\r\n    position: number;\r\n    tickets: {\r\n      id: string;\r\n      colorId: number | null;\r\n      description: string;\r\n      name: string;\r\n      position: number;\r\n    }[];\r\n  }[];\r\n}\r\n\r\nexport interface GetAllBoardsDetailsResponse {\r\n  id: number;\r\n  name: string;\r\n  colorId: number | null;\r\n  listCount: number;\r\n  ticketCount: number;\r\n}\r\n[];\r\n\r\nexport interface BoardRequestBase {\r\n  id: string;\r\n  colorId: number | null;\r\n  name: string;\r\n}\r\n\r\nexport interface CreateBoardRequest extends BoardRequestBase {}\r\n\r\nexport interface CreateDuplicateBoardRequest {\r\n  originalBoardId: string;\r\n  newBoardId: string;\r\n  newName: string;\r\n  colorId: number | null;\r\n}\r\n\r\nexport interface UpdateBoardRequest extends BoardRequestBase {}\r\n",
            "properties": [
                {
                    "name": "colorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ColorSelectionSubmenuInput",
            "id": "interface-ColorSelectionSubmenuInput-1d7d7311ffe51bebe6b4128639db84b0a39cbd9a611b52ae08c9817f54bb812379e221e5cba469c02f3ee70c132b24483a5b79865612f10ac83845c536214cbc",
            "file": "src/app/shared/models/submenuInputOutput.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type SubmenuTypes =\r\n  | 'text-input-submenu'\r\n  | 'confirmation-submenu'\r\n  | 'background-selection-submenu'\r\n  | 'generate-board-submenu'\r\n  | 'color-selection-submenu'\r\n  | 'dropdown-submenu'\r\n  | 'create-board-item-submenu'\r\n  ;\r\n\r\n// Text Input Submenu\r\nexport interface TextInputSubmenuInput {\r\n  title: string;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface TextInputSubmenuOutput {\r\n  text: string;\r\n}\r\n\r\n// Create Board Item Submenu\r\nexport interface CreateBoardItemSubmenuInput {\r\n  title : string\r\n  placeholderText? : string\r\n  buttonText : string\r\n}\r\n// placeholder is optional because having a completely empty text input is allowed\r\n\r\nexport interface CreateBoardItemSubmenuOutput {\r\n  text : string;\r\n}\r\n\r\n// Confirmation Submenu\r\nexport interface ConfirmationSubmenuInput {\r\n  title: string;\r\n  confirmationMessage: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ConfirmationSubmenuOutput {\r\n  confirmationStatus: boolean;\r\n}\r\n\r\n// Background Selection Submenu\r\nexport interface BackgroundSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface BackgroundSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Generate Board Submenu\r\nexport interface GenerateBoardSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface GenerateBoardSubmenuOutput {\r\n  name: string;\r\n  colorId: number | null;\r\n}\r\n\r\n// Color Selection Submenu\r\nexport interface ColorSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ColorSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Dropdown Submenu\r\nexport interface DropdownSubmenuInput {\r\n  title: string;\r\n  dropdownInputLabel: string;\r\n  dropdownItems: { id: string; name: string }[];\r\n  dropdownPlaceholderText: string; //Initial text in dropdown, e.g. 'Pick one of the below...'\r\n  buttonText: string;\r\n}\r\n\r\nexport interface DropdownSubmenuOutput {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\n// Union type for the Submenu Input\r\nexport type SubmenuInput =\r\n  | TextInputSubmenuInput\r\n  | ConfirmationSubmenuInput\r\n  | BackgroundSelectionSubmenuInput\r\n  | GenerateBoardSubmenuInput\r\n  | ColorSelectionSubmenuInput\r\n  | DropdownSubmenuInput\r\n  | CreateBoardItemSubmenuInput;\r\n\r\n// Union type for the Submenu Output\r\nexport type SubmenuOutput =\r\n  | TextInputSubmenuOutput\r\n  | ConfirmationSubmenuOutput\r\n  | BackgroundSelectionSubmenuOutput\r\n  | GenerateBoardSubmenuOutput\r\n  | ColorSelectionSubmenuOutput\r\n  | DropdownSubmenuOutput\r\n  | CreateBoardItemSubmenuOutput;\r\n",
            "properties": [
                {
                    "name": "buttonText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "colorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 81
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ColorSelectionSubmenuOutput",
            "id": "interface-ColorSelectionSubmenuOutput-1d7d7311ffe51bebe6b4128639db84b0a39cbd9a611b52ae08c9817f54bb812379e221e5cba469c02f3ee70c132b24483a5b79865612f10ac83845c536214cbc",
            "file": "src/app/shared/models/submenuInputOutput.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type SubmenuTypes =\r\n  | 'text-input-submenu'\r\n  | 'confirmation-submenu'\r\n  | 'background-selection-submenu'\r\n  | 'generate-board-submenu'\r\n  | 'color-selection-submenu'\r\n  | 'dropdown-submenu'\r\n  | 'create-board-item-submenu'\r\n  ;\r\n\r\n// Text Input Submenu\r\nexport interface TextInputSubmenuInput {\r\n  title: string;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface TextInputSubmenuOutput {\r\n  text: string;\r\n}\r\n\r\n// Create Board Item Submenu\r\nexport interface CreateBoardItemSubmenuInput {\r\n  title : string\r\n  placeholderText? : string\r\n  buttonText : string\r\n}\r\n// placeholder is optional because having a completely empty text input is allowed\r\n\r\nexport interface CreateBoardItemSubmenuOutput {\r\n  text : string;\r\n}\r\n\r\n// Confirmation Submenu\r\nexport interface ConfirmationSubmenuInput {\r\n  title: string;\r\n  confirmationMessage: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ConfirmationSubmenuOutput {\r\n  confirmationStatus: boolean;\r\n}\r\n\r\n// Background Selection Submenu\r\nexport interface BackgroundSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface BackgroundSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Generate Board Submenu\r\nexport interface GenerateBoardSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface GenerateBoardSubmenuOutput {\r\n  name: string;\r\n  colorId: number | null;\r\n}\r\n\r\n// Color Selection Submenu\r\nexport interface ColorSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ColorSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Dropdown Submenu\r\nexport interface DropdownSubmenuInput {\r\n  title: string;\r\n  dropdownInputLabel: string;\r\n  dropdownItems: { id: string; name: string }[];\r\n  dropdownPlaceholderText: string; //Initial text in dropdown, e.g. 'Pick one of the below...'\r\n  buttonText: string;\r\n}\r\n\r\nexport interface DropdownSubmenuOutput {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\n// Union type for the Submenu Input\r\nexport type SubmenuInput =\r\n  | TextInputSubmenuInput\r\n  | ConfirmationSubmenuInput\r\n  | BackgroundSelectionSubmenuInput\r\n  | GenerateBoardSubmenuInput\r\n  | ColorSelectionSubmenuInput\r\n  | DropdownSubmenuInput\r\n  | CreateBoardItemSubmenuInput;\r\n\r\n// Union type for the Submenu Output\r\nexport type SubmenuOutput =\r\n  | TextInputSubmenuOutput\r\n  | ConfirmationSubmenuOutput\r\n  | BackgroundSelectionSubmenuOutput\r\n  | GenerateBoardSubmenuOutput\r\n  | ColorSelectionSubmenuOutput\r\n  | DropdownSubmenuOutput\r\n  | CreateBoardItemSubmenuOutput;\r\n",
            "properties": [
                {
                    "name": "colorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 87
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ConfirmationSubmenuInput",
            "id": "interface-ConfirmationSubmenuInput-1d7d7311ffe51bebe6b4128639db84b0a39cbd9a611b52ae08c9817f54bb812379e221e5cba469c02f3ee70c132b24483a5b79865612f10ac83845c536214cbc",
            "file": "src/app/shared/models/submenuInputOutput.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type SubmenuTypes =\r\n  | 'text-input-submenu'\r\n  | 'confirmation-submenu'\r\n  | 'background-selection-submenu'\r\n  | 'generate-board-submenu'\r\n  | 'color-selection-submenu'\r\n  | 'dropdown-submenu'\r\n  | 'create-board-item-submenu'\r\n  ;\r\n\r\n// Text Input Submenu\r\nexport interface TextInputSubmenuInput {\r\n  title: string;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface TextInputSubmenuOutput {\r\n  text: string;\r\n}\r\n\r\n// Create Board Item Submenu\r\nexport interface CreateBoardItemSubmenuInput {\r\n  title : string\r\n  placeholderText? : string\r\n  buttonText : string\r\n}\r\n// placeholder is optional because having a completely empty text input is allowed\r\n\r\nexport interface CreateBoardItemSubmenuOutput {\r\n  text : string;\r\n}\r\n\r\n// Confirmation Submenu\r\nexport interface ConfirmationSubmenuInput {\r\n  title: string;\r\n  confirmationMessage: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ConfirmationSubmenuOutput {\r\n  confirmationStatus: boolean;\r\n}\r\n\r\n// Background Selection Submenu\r\nexport interface BackgroundSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface BackgroundSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Generate Board Submenu\r\nexport interface GenerateBoardSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface GenerateBoardSubmenuOutput {\r\n  name: string;\r\n  colorId: number | null;\r\n}\r\n\r\n// Color Selection Submenu\r\nexport interface ColorSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ColorSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Dropdown Submenu\r\nexport interface DropdownSubmenuInput {\r\n  title: string;\r\n  dropdownInputLabel: string;\r\n  dropdownItems: { id: string; name: string }[];\r\n  dropdownPlaceholderText: string; //Initial text in dropdown, e.g. 'Pick one of the below...'\r\n  buttonText: string;\r\n}\r\n\r\nexport interface DropdownSubmenuOutput {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\n// Union type for the Submenu Input\r\nexport type SubmenuInput =\r\n  | TextInputSubmenuInput\r\n  | ConfirmationSubmenuInput\r\n  | BackgroundSelectionSubmenuInput\r\n  | GenerateBoardSubmenuInput\r\n  | ColorSelectionSubmenuInput\r\n  | DropdownSubmenuInput\r\n  | CreateBoardItemSubmenuInput;\r\n\r\n// Union type for the Submenu Output\r\nexport type SubmenuOutput =\r\n  | TextInputSubmenuOutput\r\n  | ConfirmationSubmenuOutput\r\n  | BackgroundSelectionSubmenuOutput\r\n  | GenerateBoardSubmenuOutput\r\n  | ColorSelectionSubmenuOutput\r\n  | DropdownSubmenuOutput\r\n  | CreateBoardItemSubmenuOutput;\r\n",
            "properties": [
                {
                    "name": "buttonText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "confirmationMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ConfirmationSubmenuOutput",
            "id": "interface-ConfirmationSubmenuOutput-1d7d7311ffe51bebe6b4128639db84b0a39cbd9a611b52ae08c9817f54bb812379e221e5cba469c02f3ee70c132b24483a5b79865612f10ac83845c536214cbc",
            "file": "src/app/shared/models/submenuInputOutput.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type SubmenuTypes =\r\n  | 'text-input-submenu'\r\n  | 'confirmation-submenu'\r\n  | 'background-selection-submenu'\r\n  | 'generate-board-submenu'\r\n  | 'color-selection-submenu'\r\n  | 'dropdown-submenu'\r\n  | 'create-board-item-submenu'\r\n  ;\r\n\r\n// Text Input Submenu\r\nexport interface TextInputSubmenuInput {\r\n  title: string;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface TextInputSubmenuOutput {\r\n  text: string;\r\n}\r\n\r\n// Create Board Item Submenu\r\nexport interface CreateBoardItemSubmenuInput {\r\n  title : string\r\n  placeholderText? : string\r\n  buttonText : string\r\n}\r\n// placeholder is optional because having a completely empty text input is allowed\r\n\r\nexport interface CreateBoardItemSubmenuOutput {\r\n  text : string;\r\n}\r\n\r\n// Confirmation Submenu\r\nexport interface ConfirmationSubmenuInput {\r\n  title: string;\r\n  confirmationMessage: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ConfirmationSubmenuOutput {\r\n  confirmationStatus: boolean;\r\n}\r\n\r\n// Background Selection Submenu\r\nexport interface BackgroundSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface BackgroundSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Generate Board Submenu\r\nexport interface GenerateBoardSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface GenerateBoardSubmenuOutput {\r\n  name: string;\r\n  colorId: number | null;\r\n}\r\n\r\n// Color Selection Submenu\r\nexport interface ColorSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ColorSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Dropdown Submenu\r\nexport interface DropdownSubmenuInput {\r\n  title: string;\r\n  dropdownInputLabel: string;\r\n  dropdownItems: { id: string; name: string }[];\r\n  dropdownPlaceholderText: string; //Initial text in dropdown, e.g. 'Pick one of the below...'\r\n  buttonText: string;\r\n}\r\n\r\nexport interface DropdownSubmenuOutput {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\n// Union type for the Submenu Input\r\nexport type SubmenuInput =\r\n  | TextInputSubmenuInput\r\n  | ConfirmationSubmenuInput\r\n  | BackgroundSelectionSubmenuInput\r\n  | GenerateBoardSubmenuInput\r\n  | ColorSelectionSubmenuInput\r\n  | DropdownSubmenuInput\r\n  | CreateBoardItemSubmenuInput;\r\n\r\n// Union type for the Submenu Output\r\nexport type SubmenuOutput =\r\n  | TextInputSubmenuOutput\r\n  | ConfirmationSubmenuOutput\r\n  | BackgroundSelectionSubmenuOutput\r\n  | GenerateBoardSubmenuOutput\r\n  | ColorSelectionSubmenuOutput\r\n  | DropdownSubmenuOutput\r\n  | CreateBoardItemSubmenuOutput;\r\n",
            "properties": [
                {
                    "name": "confirmationStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CreateBoardItemSubmenuInput",
            "id": "interface-CreateBoardItemSubmenuInput-1d7d7311ffe51bebe6b4128639db84b0a39cbd9a611b52ae08c9817f54bb812379e221e5cba469c02f3ee70c132b24483a5b79865612f10ac83845c536214cbc",
            "file": "src/app/shared/models/submenuInputOutput.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type SubmenuTypes =\r\n  | 'text-input-submenu'\r\n  | 'confirmation-submenu'\r\n  | 'background-selection-submenu'\r\n  | 'generate-board-submenu'\r\n  | 'color-selection-submenu'\r\n  | 'dropdown-submenu'\r\n  | 'create-board-item-submenu'\r\n  ;\r\n\r\n// Text Input Submenu\r\nexport interface TextInputSubmenuInput {\r\n  title: string;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface TextInputSubmenuOutput {\r\n  text: string;\r\n}\r\n\r\n// Create Board Item Submenu\r\nexport interface CreateBoardItemSubmenuInput {\r\n  title : string\r\n  placeholderText? : string\r\n  buttonText : string\r\n}\r\n// placeholder is optional because having a completely empty text input is allowed\r\n\r\nexport interface CreateBoardItemSubmenuOutput {\r\n  text : string;\r\n}\r\n\r\n// Confirmation Submenu\r\nexport interface ConfirmationSubmenuInput {\r\n  title: string;\r\n  confirmationMessage: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ConfirmationSubmenuOutput {\r\n  confirmationStatus: boolean;\r\n}\r\n\r\n// Background Selection Submenu\r\nexport interface BackgroundSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface BackgroundSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Generate Board Submenu\r\nexport interface GenerateBoardSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface GenerateBoardSubmenuOutput {\r\n  name: string;\r\n  colorId: number | null;\r\n}\r\n\r\n// Color Selection Submenu\r\nexport interface ColorSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ColorSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Dropdown Submenu\r\nexport interface DropdownSubmenuInput {\r\n  title: string;\r\n  dropdownInputLabel: string;\r\n  dropdownItems: { id: string; name: string }[];\r\n  dropdownPlaceholderText: string; //Initial text in dropdown, e.g. 'Pick one of the below...'\r\n  buttonText: string;\r\n}\r\n\r\nexport interface DropdownSubmenuOutput {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\n// Union type for the Submenu Input\r\nexport type SubmenuInput =\r\n  | TextInputSubmenuInput\r\n  | ConfirmationSubmenuInput\r\n  | BackgroundSelectionSubmenuInput\r\n  | GenerateBoardSubmenuInput\r\n  | ColorSelectionSubmenuInput\r\n  | DropdownSubmenuInput\r\n  | CreateBoardItemSubmenuInput;\r\n\r\n// Union type for the Submenu Output\r\nexport type SubmenuOutput =\r\n  | TextInputSubmenuOutput\r\n  | ConfirmationSubmenuOutput\r\n  | BackgroundSelectionSubmenuOutput\r\n  | GenerateBoardSubmenuOutput\r\n  | ColorSelectionSubmenuOutput\r\n  | DropdownSubmenuOutput\r\n  | CreateBoardItemSubmenuOutput;\r\n",
            "properties": [
                {
                    "name": "buttonText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "placeholderText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CreateBoardItemSubmenuOutput",
            "id": "interface-CreateBoardItemSubmenuOutput-1d7d7311ffe51bebe6b4128639db84b0a39cbd9a611b52ae08c9817f54bb812379e221e5cba469c02f3ee70c132b24483a5b79865612f10ac83845c536214cbc",
            "file": "src/app/shared/models/submenuInputOutput.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type SubmenuTypes =\r\n  | 'text-input-submenu'\r\n  | 'confirmation-submenu'\r\n  | 'background-selection-submenu'\r\n  | 'generate-board-submenu'\r\n  | 'color-selection-submenu'\r\n  | 'dropdown-submenu'\r\n  | 'create-board-item-submenu'\r\n  ;\r\n\r\n// Text Input Submenu\r\nexport interface TextInputSubmenuInput {\r\n  title: string;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface TextInputSubmenuOutput {\r\n  text: string;\r\n}\r\n\r\n// Create Board Item Submenu\r\nexport interface CreateBoardItemSubmenuInput {\r\n  title : string\r\n  placeholderText? : string\r\n  buttonText : string\r\n}\r\n// placeholder is optional because having a completely empty text input is allowed\r\n\r\nexport interface CreateBoardItemSubmenuOutput {\r\n  text : string;\r\n}\r\n\r\n// Confirmation Submenu\r\nexport interface ConfirmationSubmenuInput {\r\n  title: string;\r\n  confirmationMessage: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ConfirmationSubmenuOutput {\r\n  confirmationStatus: boolean;\r\n}\r\n\r\n// Background Selection Submenu\r\nexport interface BackgroundSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface BackgroundSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Generate Board Submenu\r\nexport interface GenerateBoardSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface GenerateBoardSubmenuOutput {\r\n  name: string;\r\n  colorId: number | null;\r\n}\r\n\r\n// Color Selection Submenu\r\nexport interface ColorSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ColorSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Dropdown Submenu\r\nexport interface DropdownSubmenuInput {\r\n  title: string;\r\n  dropdownInputLabel: string;\r\n  dropdownItems: { id: string; name: string }[];\r\n  dropdownPlaceholderText: string; //Initial text in dropdown, e.g. 'Pick one of the below...'\r\n  buttonText: string;\r\n}\r\n\r\nexport interface DropdownSubmenuOutput {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\n// Union type for the Submenu Input\r\nexport type SubmenuInput =\r\n  | TextInputSubmenuInput\r\n  | ConfirmationSubmenuInput\r\n  | BackgroundSelectionSubmenuInput\r\n  | GenerateBoardSubmenuInput\r\n  | ColorSelectionSubmenuInput\r\n  | DropdownSubmenuInput\r\n  | CreateBoardItemSubmenuInput;\r\n\r\n// Union type for the Submenu Output\r\nexport type SubmenuOutput =\r\n  | TextInputSubmenuOutput\r\n  | ConfirmationSubmenuOutput\r\n  | BackgroundSelectionSubmenuOutput\r\n  | GenerateBoardSubmenuOutput\r\n  | ColorSelectionSubmenuOutput\r\n  | DropdownSubmenuOutput\r\n  | CreateBoardItemSubmenuOutput;\r\n",
            "properties": [
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CreateBoardRequest",
            "id": "interface-CreateBoardRequest-ecbe83f92660b78eaff4ab5b7a84da88f59f4a2667be72591558617a79be4d0235ef4e1c1ec676c55370bb54c208b109400d1a724d3c8157a06a2ff7024a4879",
            "file": "src/app/shared/models/board.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GetBoardFullDetailsResponse {\r\n  id: number;\r\n  name: string;\r\n  auth0Id: string;\r\n  colorId : number | null;\r\n  lists: {\r\n    id: string;\r\n    name: string;\r\n    position: number;\r\n    tickets: {\r\n      id: string;\r\n      colorId: number | null;\r\n      description: string;\r\n      name: string;\r\n      position: number;\r\n    }[];\r\n  }[];\r\n}\r\n\r\nexport interface GetAllBoardsDetailsResponse {\r\n  id: number;\r\n  name: string;\r\n  colorId: number | null;\r\n  listCount: number;\r\n  ticketCount: number;\r\n}\r\n[];\r\n\r\nexport interface BoardRequestBase {\r\n  id: string;\r\n  colorId: number | null;\r\n  name: string;\r\n}\r\n\r\nexport interface CreateBoardRequest extends BoardRequestBase {}\r\n\r\nexport interface CreateDuplicateBoardRequest {\r\n  originalBoardId: string;\r\n  newBoardId: string;\r\n  newName: string;\r\n  colorId: number | null;\r\n}\r\n\r\nexport interface UpdateBoardRequest extends BoardRequestBase {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "BoardRequestBase"
            ]
        },
        {
            "name": "CreateDuplicateBoardRequest",
            "id": "interface-CreateDuplicateBoardRequest-ecbe83f92660b78eaff4ab5b7a84da88f59f4a2667be72591558617a79be4d0235ef4e1c1ec676c55370bb54c208b109400d1a724d3c8157a06a2ff7024a4879",
            "file": "src/app/shared/models/board.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GetBoardFullDetailsResponse {\r\n  id: number;\r\n  name: string;\r\n  auth0Id: string;\r\n  colorId : number | null;\r\n  lists: {\r\n    id: string;\r\n    name: string;\r\n    position: number;\r\n    tickets: {\r\n      id: string;\r\n      colorId: number | null;\r\n      description: string;\r\n      name: string;\r\n      position: number;\r\n    }[];\r\n  }[];\r\n}\r\n\r\nexport interface GetAllBoardsDetailsResponse {\r\n  id: number;\r\n  name: string;\r\n  colorId: number | null;\r\n  listCount: number;\r\n  ticketCount: number;\r\n}\r\n[];\r\n\r\nexport interface BoardRequestBase {\r\n  id: string;\r\n  colorId: number | null;\r\n  name: string;\r\n}\r\n\r\nexport interface CreateBoardRequest extends BoardRequestBase {}\r\n\r\nexport interface CreateDuplicateBoardRequest {\r\n  originalBoardId: string;\r\n  newBoardId: string;\r\n  newName: string;\r\n  colorId: number | null;\r\n}\r\n\r\nexport interface UpdateBoardRequest extends BoardRequestBase {}\r\n",
            "properties": [
                {
                    "name": "colorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "newBoardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "newName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "originalBoardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CreateDuplicateListRequest",
            "id": "interface-CreateDuplicateListRequest-2ba85ccb74ac843a097b37a2e767405ef7ebb1d4c1bc198b8e777953baac05d463058018bd0a37166cb28e6bca220fea71efdcc7abd2e642917041088520a3ed",
            "file": "src/app/shared/models/list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ListDetailsBase {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\nexport interface GetAllListsDetailsResponse extends ListDetailsBase {}\r\n\r\nexport interface CreateDuplicateListRequest {\r\n  originalListId: string;\r\n  newListId: string;\r\n  newListName: string;\r\n  boardId: string;\r\n}\r\n\r\nexport interface CreateListRequest {\r\n  id: string;\r\n  boardId: string;\r\n  name: string;\r\n}\r\n\r\nexport interface UpdateListPositionRequest {\r\n  id: string;\r\n  newPosition: number;\r\n}\r\n\r\nexport interface UpdateListRequest extends ListDetailsBase {}\r\n",
            "properties": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "newListId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "newListName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "originalListId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CreateListRequest",
            "id": "interface-CreateListRequest-2ba85ccb74ac843a097b37a2e767405ef7ebb1d4c1bc198b8e777953baac05d463058018bd0a37166cb28e6bca220fea71efdcc7abd2e642917041088520a3ed",
            "file": "src/app/shared/models/list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ListDetailsBase {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\nexport interface GetAllListsDetailsResponse extends ListDetailsBase {}\r\n\r\nexport interface CreateDuplicateListRequest {\r\n  originalListId: string;\r\n  newListId: string;\r\n  newListName: string;\r\n  boardId: string;\r\n}\r\n\r\nexport interface CreateListRequest {\r\n  id: string;\r\n  boardId: string;\r\n  name: string;\r\n}\r\n\r\nexport interface UpdateListPositionRequest {\r\n  id: string;\r\n  newPosition: number;\r\n}\r\n\r\nexport interface UpdateListRequest extends ListDetailsBase {}\r\n",
            "properties": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CreateTicketRequest",
            "id": "interface-CreateTicketRequest-ea1b381d6f03540a2478891b02233c7bcb4139add191d676a341272487d4680d70d59f988b4f6caa81173464a26594f9b8d831ed0781a0ad2d9ed5a7d43b3d4a",
            "file": "src/app/shared/models/ticket.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GetTicketDetailsResponse {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  position: number;\r\n  colorId: number | null;\r\n  listId: string;\r\n  listName: string;\r\n  boardId: string;\r\n}\r\n\r\nexport interface CreateTicketRequest {\r\n  id: string;\r\n  name: string;\r\n  listId: string;\r\n}\r\n\r\nexport interface UpdateTicketRequest {\r\n  id: string;\r\n  colorId: number | null;\r\n  name: string;\r\n  description: string;\r\n}\r\n\r\nexport interface UpdateTicketPositionRequest {\r\n  id: string;\r\n  listId: string;\r\n  newPosition?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "listId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DropdownSubmenuInput",
            "id": "interface-DropdownSubmenuInput-1d7d7311ffe51bebe6b4128639db84b0a39cbd9a611b52ae08c9817f54bb812379e221e5cba469c02f3ee70c132b24483a5b79865612f10ac83845c536214cbc",
            "file": "src/app/shared/models/submenuInputOutput.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type SubmenuTypes =\r\n  | 'text-input-submenu'\r\n  | 'confirmation-submenu'\r\n  | 'background-selection-submenu'\r\n  | 'generate-board-submenu'\r\n  | 'color-selection-submenu'\r\n  | 'dropdown-submenu'\r\n  | 'create-board-item-submenu'\r\n  ;\r\n\r\n// Text Input Submenu\r\nexport interface TextInputSubmenuInput {\r\n  title: string;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface TextInputSubmenuOutput {\r\n  text: string;\r\n}\r\n\r\n// Create Board Item Submenu\r\nexport interface CreateBoardItemSubmenuInput {\r\n  title : string\r\n  placeholderText? : string\r\n  buttonText : string\r\n}\r\n// placeholder is optional because having a completely empty text input is allowed\r\n\r\nexport interface CreateBoardItemSubmenuOutput {\r\n  text : string;\r\n}\r\n\r\n// Confirmation Submenu\r\nexport interface ConfirmationSubmenuInput {\r\n  title: string;\r\n  confirmationMessage: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ConfirmationSubmenuOutput {\r\n  confirmationStatus: boolean;\r\n}\r\n\r\n// Background Selection Submenu\r\nexport interface BackgroundSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface BackgroundSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Generate Board Submenu\r\nexport interface GenerateBoardSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface GenerateBoardSubmenuOutput {\r\n  name: string;\r\n  colorId: number | null;\r\n}\r\n\r\n// Color Selection Submenu\r\nexport interface ColorSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ColorSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Dropdown Submenu\r\nexport interface DropdownSubmenuInput {\r\n  title: string;\r\n  dropdownInputLabel: string;\r\n  dropdownItems: { id: string; name: string }[];\r\n  dropdownPlaceholderText: string; //Initial text in dropdown, e.g. 'Pick one of the below...'\r\n  buttonText: string;\r\n}\r\n\r\nexport interface DropdownSubmenuOutput {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\n// Union type for the Submenu Input\r\nexport type SubmenuInput =\r\n  | TextInputSubmenuInput\r\n  | ConfirmationSubmenuInput\r\n  | BackgroundSelectionSubmenuInput\r\n  | GenerateBoardSubmenuInput\r\n  | ColorSelectionSubmenuInput\r\n  | DropdownSubmenuInput\r\n  | CreateBoardItemSubmenuInput;\r\n\r\n// Union type for the Submenu Output\r\nexport type SubmenuOutput =\r\n  | TextInputSubmenuOutput\r\n  | ConfirmationSubmenuOutput\r\n  | BackgroundSelectionSubmenuOutput\r\n  | GenerateBoardSubmenuOutput\r\n  | ColorSelectionSubmenuOutput\r\n  | DropdownSubmenuOutput\r\n  | CreateBoardItemSubmenuOutput;\r\n",
            "properties": [
                {
                    "name": "buttonText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "dropdownInputLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "dropdownItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "dropdownPlaceholderText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 92
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DropdownSubmenuOutput",
            "id": "interface-DropdownSubmenuOutput-1d7d7311ffe51bebe6b4128639db84b0a39cbd9a611b52ae08c9817f54bb812379e221e5cba469c02f3ee70c132b24483a5b79865612f10ac83845c536214cbc",
            "file": "src/app/shared/models/submenuInputOutput.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type SubmenuTypes =\r\n  | 'text-input-submenu'\r\n  | 'confirmation-submenu'\r\n  | 'background-selection-submenu'\r\n  | 'generate-board-submenu'\r\n  | 'color-selection-submenu'\r\n  | 'dropdown-submenu'\r\n  | 'create-board-item-submenu'\r\n  ;\r\n\r\n// Text Input Submenu\r\nexport interface TextInputSubmenuInput {\r\n  title: string;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface TextInputSubmenuOutput {\r\n  text: string;\r\n}\r\n\r\n// Create Board Item Submenu\r\nexport interface CreateBoardItemSubmenuInput {\r\n  title : string\r\n  placeholderText? : string\r\n  buttonText : string\r\n}\r\n// placeholder is optional because having a completely empty text input is allowed\r\n\r\nexport interface CreateBoardItemSubmenuOutput {\r\n  text : string;\r\n}\r\n\r\n// Confirmation Submenu\r\nexport interface ConfirmationSubmenuInput {\r\n  title: string;\r\n  confirmationMessage: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ConfirmationSubmenuOutput {\r\n  confirmationStatus: boolean;\r\n}\r\n\r\n// Background Selection Submenu\r\nexport interface BackgroundSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface BackgroundSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Generate Board Submenu\r\nexport interface GenerateBoardSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface GenerateBoardSubmenuOutput {\r\n  name: string;\r\n  colorId: number | null;\r\n}\r\n\r\n// Color Selection Submenu\r\nexport interface ColorSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ColorSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Dropdown Submenu\r\nexport interface DropdownSubmenuInput {\r\n  title: string;\r\n  dropdownInputLabel: string;\r\n  dropdownItems: { id: string; name: string }[];\r\n  dropdownPlaceholderText: string; //Initial text in dropdown, e.g. 'Pick one of the below...'\r\n  buttonText: string;\r\n}\r\n\r\nexport interface DropdownSubmenuOutput {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\n// Union type for the Submenu Input\r\nexport type SubmenuInput =\r\n  | TextInputSubmenuInput\r\n  | ConfirmationSubmenuInput\r\n  | BackgroundSelectionSubmenuInput\r\n  | GenerateBoardSubmenuInput\r\n  | ColorSelectionSubmenuInput\r\n  | DropdownSubmenuInput\r\n  | CreateBoardItemSubmenuInput;\r\n\r\n// Union type for the Submenu Output\r\nexport type SubmenuOutput =\r\n  | TextInputSubmenuOutput\r\n  | ConfirmationSubmenuOutput\r\n  | BackgroundSelectionSubmenuOutput\r\n  | GenerateBoardSubmenuOutput\r\n  | ColorSelectionSubmenuOutput\r\n  | DropdownSubmenuOutput\r\n  | CreateBoardItemSubmenuOutput;\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 101
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "GenerateBoardSubmenuInput",
            "id": "interface-GenerateBoardSubmenuInput-1d7d7311ffe51bebe6b4128639db84b0a39cbd9a611b52ae08c9817f54bb812379e221e5cba469c02f3ee70c132b24483a5b79865612f10ac83845c536214cbc",
            "file": "src/app/shared/models/submenuInputOutput.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type SubmenuTypes =\r\n  | 'text-input-submenu'\r\n  | 'confirmation-submenu'\r\n  | 'background-selection-submenu'\r\n  | 'generate-board-submenu'\r\n  | 'color-selection-submenu'\r\n  | 'dropdown-submenu'\r\n  | 'create-board-item-submenu'\r\n  ;\r\n\r\n// Text Input Submenu\r\nexport interface TextInputSubmenuInput {\r\n  title: string;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface TextInputSubmenuOutput {\r\n  text: string;\r\n}\r\n\r\n// Create Board Item Submenu\r\nexport interface CreateBoardItemSubmenuInput {\r\n  title : string\r\n  placeholderText? : string\r\n  buttonText : string\r\n}\r\n// placeholder is optional because having a completely empty text input is allowed\r\n\r\nexport interface CreateBoardItemSubmenuOutput {\r\n  text : string;\r\n}\r\n\r\n// Confirmation Submenu\r\nexport interface ConfirmationSubmenuInput {\r\n  title: string;\r\n  confirmationMessage: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ConfirmationSubmenuOutput {\r\n  confirmationStatus: boolean;\r\n}\r\n\r\n// Background Selection Submenu\r\nexport interface BackgroundSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface BackgroundSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Generate Board Submenu\r\nexport interface GenerateBoardSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface GenerateBoardSubmenuOutput {\r\n  name: string;\r\n  colorId: number | null;\r\n}\r\n\r\n// Color Selection Submenu\r\nexport interface ColorSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ColorSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Dropdown Submenu\r\nexport interface DropdownSubmenuInput {\r\n  title: string;\r\n  dropdownInputLabel: string;\r\n  dropdownItems: { id: string; name: string }[];\r\n  dropdownPlaceholderText: string; //Initial text in dropdown, e.g. 'Pick one of the below...'\r\n  buttonText: string;\r\n}\r\n\r\nexport interface DropdownSubmenuOutput {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\n// Union type for the Submenu Input\r\nexport type SubmenuInput =\r\n  | TextInputSubmenuInput\r\n  | ConfirmationSubmenuInput\r\n  | BackgroundSelectionSubmenuInput\r\n  | GenerateBoardSubmenuInput\r\n  | ColorSelectionSubmenuInput\r\n  | DropdownSubmenuInput\r\n  | CreateBoardItemSubmenuInput;\r\n\r\n// Union type for the Submenu Output\r\nexport type SubmenuOutput =\r\n  | TextInputSubmenuOutput\r\n  | ConfirmationSubmenuOutput\r\n  | BackgroundSelectionSubmenuOutput\r\n  | GenerateBoardSubmenuOutput\r\n  | ColorSelectionSubmenuOutput\r\n  | DropdownSubmenuOutput\r\n  | CreateBoardItemSubmenuOutput;\r\n",
            "properties": [
                {
                    "name": "buttonText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "colorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "colorSelectionHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "initialText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "textInputLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "GenerateBoardSubmenuOutput",
            "id": "interface-GenerateBoardSubmenuOutput-1d7d7311ffe51bebe6b4128639db84b0a39cbd9a611b52ae08c9817f54bb812379e221e5cba469c02f3ee70c132b24483a5b79865612f10ac83845c536214cbc",
            "file": "src/app/shared/models/submenuInputOutput.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type SubmenuTypes =\r\n  | 'text-input-submenu'\r\n  | 'confirmation-submenu'\r\n  | 'background-selection-submenu'\r\n  | 'generate-board-submenu'\r\n  | 'color-selection-submenu'\r\n  | 'dropdown-submenu'\r\n  | 'create-board-item-submenu'\r\n  ;\r\n\r\n// Text Input Submenu\r\nexport interface TextInputSubmenuInput {\r\n  title: string;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface TextInputSubmenuOutput {\r\n  text: string;\r\n}\r\n\r\n// Create Board Item Submenu\r\nexport interface CreateBoardItemSubmenuInput {\r\n  title : string\r\n  placeholderText? : string\r\n  buttonText : string\r\n}\r\n// placeholder is optional because having a completely empty text input is allowed\r\n\r\nexport interface CreateBoardItemSubmenuOutput {\r\n  text : string;\r\n}\r\n\r\n// Confirmation Submenu\r\nexport interface ConfirmationSubmenuInput {\r\n  title: string;\r\n  confirmationMessage: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ConfirmationSubmenuOutput {\r\n  confirmationStatus: boolean;\r\n}\r\n\r\n// Background Selection Submenu\r\nexport interface BackgroundSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface BackgroundSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Generate Board Submenu\r\nexport interface GenerateBoardSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface GenerateBoardSubmenuOutput {\r\n  name: string;\r\n  colorId: number | null;\r\n}\r\n\r\n// Color Selection Submenu\r\nexport interface ColorSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ColorSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Dropdown Submenu\r\nexport interface DropdownSubmenuInput {\r\n  title: string;\r\n  dropdownInputLabel: string;\r\n  dropdownItems: { id: string; name: string }[];\r\n  dropdownPlaceholderText: string; //Initial text in dropdown, e.g. 'Pick one of the below...'\r\n  buttonText: string;\r\n}\r\n\r\nexport interface DropdownSubmenuOutput {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\n// Union type for the Submenu Input\r\nexport type SubmenuInput =\r\n  | TextInputSubmenuInput\r\n  | ConfirmationSubmenuInput\r\n  | BackgroundSelectionSubmenuInput\r\n  | GenerateBoardSubmenuInput\r\n  | ColorSelectionSubmenuInput\r\n  | DropdownSubmenuInput\r\n  | CreateBoardItemSubmenuInput;\r\n\r\n// Union type for the Submenu Output\r\nexport type SubmenuOutput =\r\n  | TextInputSubmenuOutput\r\n  | ConfirmationSubmenuOutput\r\n  | BackgroundSelectionSubmenuOutput\r\n  | GenerateBoardSubmenuOutput\r\n  | ColorSelectionSubmenuOutput\r\n  | DropdownSubmenuOutput\r\n  | CreateBoardItemSubmenuOutput;\r\n",
            "properties": [
                {
                    "name": "colorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "GetAllBoardsDetailsResponse",
            "id": "interface-GetAllBoardsDetailsResponse-ecbe83f92660b78eaff4ab5b7a84da88f59f4a2667be72591558617a79be4d0235ef4e1c1ec676c55370bb54c208b109400d1a724d3c8157a06a2ff7024a4879",
            "file": "src/app/shared/models/board.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GetBoardFullDetailsResponse {\r\n  id: number;\r\n  name: string;\r\n  auth0Id: string;\r\n  colorId : number | null;\r\n  lists: {\r\n    id: string;\r\n    name: string;\r\n    position: number;\r\n    tickets: {\r\n      id: string;\r\n      colorId: number | null;\r\n      description: string;\r\n      name: string;\r\n      position: number;\r\n    }[];\r\n  }[];\r\n}\r\n\r\nexport interface GetAllBoardsDetailsResponse {\r\n  id: number;\r\n  name: string;\r\n  colorId: number | null;\r\n  listCount: number;\r\n  ticketCount: number;\r\n}\r\n[];\r\n\r\nexport interface BoardRequestBase {\r\n  id: string;\r\n  colorId: number | null;\r\n  name: string;\r\n}\r\n\r\nexport interface CreateBoardRequest extends BoardRequestBase {}\r\n\r\nexport interface CreateDuplicateBoardRequest {\r\n  originalBoardId: string;\r\n  newBoardId: string;\r\n  newName: string;\r\n  colorId: number | null;\r\n}\r\n\r\nexport interface UpdateBoardRequest extends BoardRequestBase {}\r\n",
            "properties": [
                {
                    "name": "colorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "listCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "ticketCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "GetAllListsDetailsResponse",
            "id": "interface-GetAllListsDetailsResponse-2ba85ccb74ac843a097b37a2e767405ef7ebb1d4c1bc198b8e777953baac05d463058018bd0a37166cb28e6bca220fea71efdcc7abd2e642917041088520a3ed",
            "file": "src/app/shared/models/list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ListDetailsBase {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\nexport interface GetAllListsDetailsResponse extends ListDetailsBase {}\r\n\r\nexport interface CreateDuplicateListRequest {\r\n  originalListId: string;\r\n  newListId: string;\r\n  newListName: string;\r\n  boardId: string;\r\n}\r\n\r\nexport interface CreateListRequest {\r\n  id: string;\r\n  boardId: string;\r\n  name: string;\r\n}\r\n\r\nexport interface UpdateListPositionRequest {\r\n  id: string;\r\n  newPosition: number;\r\n}\r\n\r\nexport interface UpdateListRequest extends ListDetailsBase {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "ListDetailsBase"
            ]
        },
        {
            "name": "GetBoardFullDetailsResponse",
            "id": "interface-GetBoardFullDetailsResponse-ecbe83f92660b78eaff4ab5b7a84da88f59f4a2667be72591558617a79be4d0235ef4e1c1ec676c55370bb54c208b109400d1a724d3c8157a06a2ff7024a4879",
            "file": "src/app/shared/models/board.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GetBoardFullDetailsResponse {\r\n  id: number;\r\n  name: string;\r\n  auth0Id: string;\r\n  colorId : number | null;\r\n  lists: {\r\n    id: string;\r\n    name: string;\r\n    position: number;\r\n    tickets: {\r\n      id: string;\r\n      colorId: number | null;\r\n      description: string;\r\n      name: string;\r\n      position: number;\r\n    }[];\r\n  }[];\r\n}\r\n\r\nexport interface GetAllBoardsDetailsResponse {\r\n  id: number;\r\n  name: string;\r\n  colorId: number | null;\r\n  listCount: number;\r\n  ticketCount: number;\r\n}\r\n[];\r\n\r\nexport interface BoardRequestBase {\r\n  id: string;\r\n  colorId: number | null;\r\n  name: string;\r\n}\r\n\r\nexport interface CreateBoardRequest extends BoardRequestBase {}\r\n\r\nexport interface CreateDuplicateBoardRequest {\r\n  originalBoardId: string;\r\n  newBoardId: string;\r\n  newName: string;\r\n  colorId: number | null;\r\n}\r\n\r\nexport interface UpdateBoardRequest extends BoardRequestBase {}\r\n",
            "properties": [
                {
                    "name": "auth0Id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "colorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "lists",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "GetColorsResponse",
            "id": "interface-GetColorsResponse-e3afee8e5b41bd821473c1246f812c86b638b8960feae34ae14b2a04a4fa57cea76cef6bd0bcdcf8b1a26283baf1cee86dfe206703c01b33bc952dbc014cf3dd",
            "file": "src/app/shared/models/color.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GetColorsResponse {\r\n  id: number;\r\n  hexCode: string;\r\n}\r\n[];\r\n",
            "properties": [
                {
                    "name": "hexCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "GetTicketDetailsResponse",
            "id": "interface-GetTicketDetailsResponse-ea1b381d6f03540a2478891b02233c7bcb4139add191d676a341272487d4680d70d59f988b4f6caa81173464a26594f9b8d831ed0781a0ad2d9ed5a7d43b3d4a",
            "file": "src/app/shared/models/ticket.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GetTicketDetailsResponse {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  position: number;\r\n  colorId: number | null;\r\n  listId: string;\r\n  listName: string;\r\n  boardId: string;\r\n}\r\n\r\nexport interface CreateTicketRequest {\r\n  id: string;\r\n  name: string;\r\n  listId: string;\r\n}\r\n\r\nexport interface UpdateTicketRequest {\r\n  id: string;\r\n  colorId: number | null;\r\n  name: string;\r\n  description: string;\r\n}\r\n\r\nexport interface UpdateTicketPositionRequest {\r\n  id: string;\r\n  listId: string;\r\n  newPosition?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "colorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "listId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "listName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ListDetailsBase",
            "id": "interface-ListDetailsBase-2ba85ccb74ac843a097b37a2e767405ef7ebb1d4c1bc198b8e777953baac05d463058018bd0a37166cb28e6bca220fea71efdcc7abd2e642917041088520a3ed",
            "file": "src/app/shared/models/list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ListDetailsBase {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\nexport interface GetAllListsDetailsResponse extends ListDetailsBase {}\r\n\r\nexport interface CreateDuplicateListRequest {\r\n  originalListId: string;\r\n  newListId: string;\r\n  newListName: string;\r\n  boardId: string;\r\n}\r\n\r\nexport interface CreateListRequest {\r\n  id: string;\r\n  boardId: string;\r\n  name: string;\r\n}\r\n\r\nexport interface UpdateListPositionRequest {\r\n  id: string;\r\n  newPosition: number;\r\n}\r\n\r\nexport interface UpdateListRequest extends ListDetailsBase {}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "MenuConfig",
            "id": "interface-MenuConfig-2d2f2c65c657c9fbfb3f3b7462cdf0ad2ca3e22e263c9af47ebee09b0173722de71e9cb338e7e31cd25866b7626ff722a435660ab899f5ba666800847e944491",
            "file": "src/app/shared/models/menu.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n  SubmenuTypes,\r\n  SubmenuInput,\r\n  SubmenuOutput,\r\n} from './submenuInputOutput.model';\r\n// Parent = (MenuConfig) => Menu = (SubmenuTransfer) => Submenu = (SubmenuTransfer) => Menu = (SubmenuTransfer) => Parent\r\n\r\n// Used when parent of menu sends it desired menus\r\nexport interface MenuConfig {\r\n  submenus: {\r\n    buttonText : string\r\n    submenu : SubmenuTransfer\r\n  } []\r\n}\r\n\r\nexport interface SubmenuTransfer {\r\n  type: SubmenuTypes; // e.g., 'text-input-submenu', 'confirmation-submenu'\r\n  purpose: string; // e.g., 'rename', 'duplicate' (used to differentiate the purposes multiple same type submenus in the same menu)\r\n  payload: SubmenuInput | SubmenuOutput;\r\n}\r\n",
            "properties": [
                {
                    "name": "submenus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SubmenuTransfer",
            "id": "interface-SubmenuTransfer-2d2f2c65c657c9fbfb3f3b7462cdf0ad2ca3e22e263c9af47ebee09b0173722de71e9cb338e7e31cd25866b7626ff722a435660ab899f5ba666800847e944491",
            "file": "src/app/shared/models/menu.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n  SubmenuTypes,\r\n  SubmenuInput,\r\n  SubmenuOutput,\r\n} from './submenuInputOutput.model';\r\n// Parent = (MenuConfig) => Menu = (SubmenuTransfer) => Submenu = (SubmenuTransfer) => Menu = (SubmenuTransfer) => Parent\r\n\r\n// Used when parent of menu sends it desired menus\r\nexport interface MenuConfig {\r\n  submenus: {\r\n    buttonText : string\r\n    submenu : SubmenuTransfer\r\n  } []\r\n}\r\n\r\nexport interface SubmenuTransfer {\r\n  type: SubmenuTypes; // e.g., 'text-input-submenu', 'confirmation-submenu'\r\n  purpose: string; // e.g., 'rename', 'duplicate' (used to differentiate the purposes multiple same type submenus in the same menu)\r\n  payload: SubmenuInput | SubmenuOutput;\r\n}\r\n",
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubmenuInput | SubmenuOutput",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "purpose",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubmenuTypes",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TextInputSubmenuInput",
            "id": "interface-TextInputSubmenuInput-1d7d7311ffe51bebe6b4128639db84b0a39cbd9a611b52ae08c9817f54bb812379e221e5cba469c02f3ee70c132b24483a5b79865612f10ac83845c536214cbc",
            "file": "src/app/shared/models/submenuInputOutput.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type SubmenuTypes =\r\n  | 'text-input-submenu'\r\n  | 'confirmation-submenu'\r\n  | 'background-selection-submenu'\r\n  | 'generate-board-submenu'\r\n  | 'color-selection-submenu'\r\n  | 'dropdown-submenu'\r\n  | 'create-board-item-submenu'\r\n  ;\r\n\r\n// Text Input Submenu\r\nexport interface TextInputSubmenuInput {\r\n  title: string;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface TextInputSubmenuOutput {\r\n  text: string;\r\n}\r\n\r\n// Create Board Item Submenu\r\nexport interface CreateBoardItemSubmenuInput {\r\n  title : string\r\n  placeholderText? : string\r\n  buttonText : string\r\n}\r\n// placeholder is optional because having a completely empty text input is allowed\r\n\r\nexport interface CreateBoardItemSubmenuOutput {\r\n  text : string;\r\n}\r\n\r\n// Confirmation Submenu\r\nexport interface ConfirmationSubmenuInput {\r\n  title: string;\r\n  confirmationMessage: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ConfirmationSubmenuOutput {\r\n  confirmationStatus: boolean;\r\n}\r\n\r\n// Background Selection Submenu\r\nexport interface BackgroundSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface BackgroundSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Generate Board Submenu\r\nexport interface GenerateBoardSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface GenerateBoardSubmenuOutput {\r\n  name: string;\r\n  colorId: number | null;\r\n}\r\n\r\n// Color Selection Submenu\r\nexport interface ColorSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ColorSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Dropdown Submenu\r\nexport interface DropdownSubmenuInput {\r\n  title: string;\r\n  dropdownInputLabel: string;\r\n  dropdownItems: { id: string; name: string }[];\r\n  dropdownPlaceholderText: string; //Initial text in dropdown, e.g. 'Pick one of the below...'\r\n  buttonText: string;\r\n}\r\n\r\nexport interface DropdownSubmenuOutput {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\n// Union type for the Submenu Input\r\nexport type SubmenuInput =\r\n  | TextInputSubmenuInput\r\n  | ConfirmationSubmenuInput\r\n  | BackgroundSelectionSubmenuInput\r\n  | GenerateBoardSubmenuInput\r\n  | ColorSelectionSubmenuInput\r\n  | DropdownSubmenuInput\r\n  | CreateBoardItemSubmenuInput;\r\n\r\n// Union type for the Submenu Output\r\nexport type SubmenuOutput =\r\n  | TextInputSubmenuOutput\r\n  | ConfirmationSubmenuOutput\r\n  | BackgroundSelectionSubmenuOutput\r\n  | GenerateBoardSubmenuOutput\r\n  | ColorSelectionSubmenuOutput\r\n  | DropdownSubmenuOutput\r\n  | CreateBoardItemSubmenuOutput;\r\n",
            "properties": [
                {
                    "name": "buttonText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "initialText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "textInputLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TextInputSubmenuOutput",
            "id": "interface-TextInputSubmenuOutput-1d7d7311ffe51bebe6b4128639db84b0a39cbd9a611b52ae08c9817f54bb812379e221e5cba469c02f3ee70c132b24483a5b79865612f10ac83845c536214cbc",
            "file": "src/app/shared/models/submenuInputOutput.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type SubmenuTypes =\r\n  | 'text-input-submenu'\r\n  | 'confirmation-submenu'\r\n  | 'background-selection-submenu'\r\n  | 'generate-board-submenu'\r\n  | 'color-selection-submenu'\r\n  | 'dropdown-submenu'\r\n  | 'create-board-item-submenu'\r\n  ;\r\n\r\n// Text Input Submenu\r\nexport interface TextInputSubmenuInput {\r\n  title: string;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface TextInputSubmenuOutput {\r\n  text: string;\r\n}\r\n\r\n// Create Board Item Submenu\r\nexport interface CreateBoardItemSubmenuInput {\r\n  title : string\r\n  placeholderText? : string\r\n  buttonText : string\r\n}\r\n// placeholder is optional because having a completely empty text input is allowed\r\n\r\nexport interface CreateBoardItemSubmenuOutput {\r\n  text : string;\r\n}\r\n\r\n// Confirmation Submenu\r\nexport interface ConfirmationSubmenuInput {\r\n  title: string;\r\n  confirmationMessage: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ConfirmationSubmenuOutput {\r\n  confirmationStatus: boolean;\r\n}\r\n\r\n// Background Selection Submenu\r\nexport interface BackgroundSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface BackgroundSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Generate Board Submenu\r\nexport interface GenerateBoardSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  textInputLabel: string;\r\n  initialText?: string;\r\n  placeholder?: string;\r\n  colorSelectionHeader: string;\r\n  buttonText: string;\r\n}\r\n//initialText and placeholder are optional because having a completely empty text input is allowed\r\n\r\nexport interface GenerateBoardSubmenuOutput {\r\n  name: string;\r\n  colorId: number | null;\r\n}\r\n\r\n// Color Selection Submenu\r\nexport interface ColorSelectionSubmenuInput {\r\n  title: string;\r\n  colorId: number | null;\r\n  buttonText: string;\r\n}\r\n\r\nexport interface ColorSelectionSubmenuOutput {\r\n  colorId: number | null;\r\n}\r\n\r\n// Dropdown Submenu\r\nexport interface DropdownSubmenuInput {\r\n  title: string;\r\n  dropdownInputLabel: string;\r\n  dropdownItems: { id: string; name: string }[];\r\n  dropdownPlaceholderText: string; //Initial text in dropdown, e.g. 'Pick one of the below...'\r\n  buttonText: string;\r\n}\r\n\r\nexport interface DropdownSubmenuOutput {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\n// Union type for the Submenu Input\r\nexport type SubmenuInput =\r\n  | TextInputSubmenuInput\r\n  | ConfirmationSubmenuInput\r\n  | BackgroundSelectionSubmenuInput\r\n  | GenerateBoardSubmenuInput\r\n  | ColorSelectionSubmenuInput\r\n  | DropdownSubmenuInput\r\n  | CreateBoardItemSubmenuInput;\r\n\r\n// Union type for the Submenu Output\r\nexport type SubmenuOutput =\r\n  | TextInputSubmenuOutput\r\n  | ConfirmationSubmenuOutput\r\n  | BackgroundSelectionSubmenuOutput\r\n  | GenerateBoardSubmenuOutput\r\n  | ColorSelectionSubmenuOutput\r\n  | DropdownSubmenuOutput\r\n  | CreateBoardItemSubmenuOutput;\r\n",
            "properties": [
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Ticket",
            "id": "interface-Ticket-cf061e466b0e373679a0af275c0ccdd615296db09a76bc2de16acb6f5f0cabdb8dbe1355a89d140d80931166ced7ea346855b78ae59d9006288ab4eef3d1fad0",
            "file": "src/app/project/project.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { environment } from '../../environments/environment';\r\nimport { UtilsService } from '../shared/utils/utils.service';\r\nimport { AuthService } from '@auth0/auth0-angular';\r\nimport { MaterialSharedModule } from '../shared/material/material.shared';\r\n\r\ninterface Ticket {\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  isEditing?: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-project',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule, MaterialSharedModule],\r\n  templateUrl: './project.component.html',\r\n  styleUrls: ['./project.component.scss'],\r\n})\r\nexport class ProjectComponent implements OnInit {\r\n  description: string = '';\r\n  title: string = '';\r\n  tickets: Ticket[] = [];\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private utilsService: UtilsService,\r\n    public auth: AuthService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.getTickets(); // Fetch tickets when the component is initialized\r\n  }\r\n\r\n  // Toggle edit mode for a specific ticket\r\n  toggleEditMode(ticket: Ticket) {\r\n    ticket.isEditing = !ticket.isEditing;\r\n  }\r\n\r\n  // Save changes to the ticket (HTTP PUT request)\r\n  updateTicket(ticket: Ticket) {\r\n    const updatedTicket = {\r\n      title: ticket.title,\r\n      description: ticket.description,\r\n      updatedAt: new Date(),\r\n    };\r\n\r\n    this.http\r\n      .put(`${environment.baseURL}/tickets/${ticket.id}`, updatedTicket, {\r\n        withCredentials: true, // Include cookies in the request\r\n      })\r\n      .subscribe({\r\n        next: (response) => {\r\n          console.log('Ticket updated successfully:', response);\r\n          ticket.isEditing = false; // Exit edit mode after saving\r\n          this.getTickets(); // Refresh tickets list\r\n        },\r\n        error: (error) => {\r\n          console.log('Failed to update ticket:', error);\r\n        },\r\n      });\r\n  }\r\n\r\n  deleteTicket(ticketId: number) {\r\n    this.http\r\n      .delete(`${environment.baseURL}/tickets/${ticketId}`, {\r\n        withCredentials: true, // Include cookies in the request\r\n      })\r\n      .subscribe({\r\n        next: (response) => {\r\n          console.log(\r\n            `Ticket with ID ${ticketId} deleted successfully:`,\r\n            response\r\n          );\r\n          this.getTickets();\r\n        },\r\n        error: (error) => {\r\n          console.log(`Failed to delete ticket with ID ${ticketId}`, error);\r\n        },\r\n      });\r\n  }\r\n\r\n  submitTicket() {\r\n    const ticketData = {\r\n      title: this.title,\r\n      description: this.description,\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n    };\r\n\r\n    this.http\r\n      .post(`${environment.baseURL}/tickets`, ticketData, {\r\n        withCredentials: true, // Include cookies in the request\r\n      })\r\n      .subscribe({\r\n        next: (response) => {\r\n          console.log('Ticket added successfully:', response);\r\n          this.getTickets();\r\n          // Reset the form fields\r\n          this.title = '';\r\n          this.description = '';\r\n        },\r\n        error: (error) => {\r\n          console.log('Failed to add ticket:', error);\r\n        },\r\n      });\r\n  }\r\n\r\n  getTickets() {\r\n    this.auth.getAccessTokenSilently().subscribe((token) => {\r\n      console.log('Access Token:', token);\r\n    });\r\n\r\n    this.auth.isAuthenticated$.subscribe((isAuthenticated) => {\r\n      console.log('User is authenticated:', isAuthenticated);\r\n    });\r\n\r\n    this.http\r\n      .get<Ticket[]>(`${environment.baseURL}/tickets`, {\r\n        withCredentials: true, // Include cookies in the request\r\n      })\r\n      .subscribe({\r\n        next: (data) => {\r\n          this.tickets = data.map((ticket) => ({\r\n            ...ticket,\r\n            isEditing: false, // Initialize edit mode to false\r\n          }));\r\n        },\r\n        error: (error) => {\r\n          console.log('An error occurred while fetching data', error);\r\n        },\r\n      });\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "isEditing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UpdateBoardRequest",
            "id": "interface-UpdateBoardRequest-ecbe83f92660b78eaff4ab5b7a84da88f59f4a2667be72591558617a79be4d0235ef4e1c1ec676c55370bb54c208b109400d1a724d3c8157a06a2ff7024a4879",
            "file": "src/app/shared/models/board.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GetBoardFullDetailsResponse {\r\n  id: number;\r\n  name: string;\r\n  auth0Id: string;\r\n  colorId : number | null;\r\n  lists: {\r\n    id: string;\r\n    name: string;\r\n    position: number;\r\n    tickets: {\r\n      id: string;\r\n      colorId: number | null;\r\n      description: string;\r\n      name: string;\r\n      position: number;\r\n    }[];\r\n  }[];\r\n}\r\n\r\nexport interface GetAllBoardsDetailsResponse {\r\n  id: number;\r\n  name: string;\r\n  colorId: number | null;\r\n  listCount: number;\r\n  ticketCount: number;\r\n}\r\n[];\r\n\r\nexport interface BoardRequestBase {\r\n  id: string;\r\n  colorId: number | null;\r\n  name: string;\r\n}\r\n\r\nexport interface CreateBoardRequest extends BoardRequestBase {}\r\n\r\nexport interface CreateDuplicateBoardRequest {\r\n  originalBoardId: string;\r\n  newBoardId: string;\r\n  newName: string;\r\n  colorId: number | null;\r\n}\r\n\r\nexport interface UpdateBoardRequest extends BoardRequestBase {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "BoardRequestBase"
            ]
        },
        {
            "name": "UpdateListPositionRequest",
            "id": "interface-UpdateListPositionRequest-2ba85ccb74ac843a097b37a2e767405ef7ebb1d4c1bc198b8e777953baac05d463058018bd0a37166cb28e6bca220fea71efdcc7abd2e642917041088520a3ed",
            "file": "src/app/shared/models/list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ListDetailsBase {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\nexport interface GetAllListsDetailsResponse extends ListDetailsBase {}\r\n\r\nexport interface CreateDuplicateListRequest {\r\n  originalListId: string;\r\n  newListId: string;\r\n  newListName: string;\r\n  boardId: string;\r\n}\r\n\r\nexport interface CreateListRequest {\r\n  id: string;\r\n  boardId: string;\r\n  name: string;\r\n}\r\n\r\nexport interface UpdateListPositionRequest {\r\n  id: string;\r\n  newPosition: number;\r\n}\r\n\r\nexport interface UpdateListRequest extends ListDetailsBase {}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "newPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UpdateListRequest",
            "id": "interface-UpdateListRequest-2ba85ccb74ac843a097b37a2e767405ef7ebb1d4c1bc198b8e777953baac05d463058018bd0a37166cb28e6bca220fea71efdcc7abd2e642917041088520a3ed",
            "file": "src/app/shared/models/list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ListDetailsBase {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\nexport interface GetAllListsDetailsResponse extends ListDetailsBase {}\r\n\r\nexport interface CreateDuplicateListRequest {\r\n  originalListId: string;\r\n  newListId: string;\r\n  newListName: string;\r\n  boardId: string;\r\n}\r\n\r\nexport interface CreateListRequest {\r\n  id: string;\r\n  boardId: string;\r\n  name: string;\r\n}\r\n\r\nexport interface UpdateListPositionRequest {\r\n  id: string;\r\n  newPosition: number;\r\n}\r\n\r\nexport interface UpdateListRequest extends ListDetailsBase {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "ListDetailsBase"
            ]
        },
        {
            "name": "UpdateTicketPositionRequest",
            "id": "interface-UpdateTicketPositionRequest-ea1b381d6f03540a2478891b02233c7bcb4139add191d676a341272487d4680d70d59f988b4f6caa81173464a26594f9b8d831ed0781a0ad2d9ed5a7d43b3d4a",
            "file": "src/app/shared/models/ticket.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GetTicketDetailsResponse {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  position: number;\r\n  colorId: number | null;\r\n  listId: string;\r\n  listName: string;\r\n  boardId: string;\r\n}\r\n\r\nexport interface CreateTicketRequest {\r\n  id: string;\r\n  name: string;\r\n  listId: string;\r\n}\r\n\r\nexport interface UpdateTicketRequest {\r\n  id: string;\r\n  colorId: number | null;\r\n  name: string;\r\n  description: string;\r\n}\r\n\r\nexport interface UpdateTicketPositionRequest {\r\n  id: string;\r\n  listId: string;\r\n  newPosition?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "listId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "newPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UpdateTicketRequest",
            "id": "interface-UpdateTicketRequest-ea1b381d6f03540a2478891b02233c7bcb4139add191d676a341272487d4680d70d59f988b4f6caa81173464a26594f9b8d831ed0781a0ad2d9ed5a7d43b3d4a",
            "file": "src/app/shared/models/ticket.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GetTicketDetailsResponse {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  position: number;\r\n  colorId: number | null;\r\n  listId: string;\r\n  listName: string;\r\n  boardId: string;\r\n}\r\n\r\nexport interface CreateTicketRequest {\r\n  id: string;\r\n  name: string;\r\n  listId: string;\r\n}\r\n\r\nexport interface UpdateTicketRequest {\r\n  id: string;\r\n  colorId: number | null;\r\n  name: string;\r\n  description: string;\r\n}\r\n\r\nexport interface UpdateTicketPositionRequest {\r\n  id: string;\r\n  listId: string;\r\n  newPosition?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "colorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-a35c4b61db76c8df1c467646844ec0f7c5df82011d0084929d2105b7dffe64e852eb3eb70e829f4b4ba32df5de10dc2088b9d882c98e5ee0f7c372640421253d",
            "file": "src/app/core/services/auth.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "`${environment.baseURL}/auth`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "deleteGuestData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeletes guest data and removes the Guest ID cookie.\n",
                    "description": "<p>Deletes guest data and removes the Guest ID cookie.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1688,
                                "end": 1695,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable of void.</p>\n"
                        }
                    ]
                },
                {
                    "name": "deleteGuestDataForRegisteredUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeletes guest data for a registered user.\n",
                    "description": "<p>Deletes guest data for a registered user.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2003,
                                "end": 2010,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable of void.</p>\n"
                        }
                    ]
                },
                {
                    "name": "generateGuestId",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerates a Guest ID and sets the cookie.\n",
                    "description": "<p>Generates a Guest ID and sets the cookie.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 613,
                                "end": 620,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable of any (adjust based on backend response if necessary).</p>\n"
                        }
                    ]
                },
                {
                    "name": "hasGuestData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if there is guest data associated with the Guest ID.\n",
                    "description": "<p>Checks if there is guest data associated with the Guest ID.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 986,
                                "end": 993,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable of { hasGuestData: boolean }.</p>\n"
                        }
                    ]
                },
                {
                    "name": "transferGuestData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTransfers guest data to the authenticated user.\n",
                    "description": "<p>Transfers guest data to the authenticated user.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1359,
                                "end": 1366,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable of void.</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { environment } from '../../../environments/environment';\r\nimport { ErrorHandlingService } from './error-handling.service';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private baseUrl = `${environment.baseURL}/auth`;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private errorHandlingService: ErrorHandlingService\r\n  ) {}\r\n\r\n  /**\r\n   * Generates a Guest ID and sets the cookie.\r\n   * @returns An Observable of any (adjust based on backend response if necessary).\r\n   */\r\n  generateGuestId(): Observable<any> {\r\n    const url = `${this.baseUrl}/generateGuestId`;\r\n    return this.http\r\n      .get<any>(url)\r\n      .pipe(catchError(this.errorHandlingService.handleError));\r\n  }\r\n\r\n  /**\r\n   * Checks if there is guest data associated with the Guest ID.\r\n   * @returns An Observable of { hasGuestData: boolean }.\r\n   */\r\n  hasGuestData(): Observable<{ hasGuestData: boolean }> {\r\n    const url = `${this.baseUrl}/hasGuestData`;\r\n    return this.http\r\n      .get<{ hasGuestData: boolean }>(url)\r\n      .pipe(catchError(this.errorHandlingService.handleError));\r\n  }\r\n\r\n  /**\r\n   * Transfers guest data to the authenticated user.\r\n   * @returns An Observable of void.\r\n   */\r\n  transferGuestData(): Observable<void> {\r\n    const url = `${this.baseUrl}/transferGuestData`;\r\n    return this.http\r\n      .post<void>(url, {})\r\n      .pipe(catchError(this.errorHandlingService.handleError));\r\n  }\r\n\r\n  /**\r\n   * Deletes guest data and removes the Guest ID cookie.\r\n   * @returns An Observable of void.\r\n   */\r\n  deleteGuestData(): Observable<void> {\r\n    const url = `${this.baseUrl}/deleteGuestData`;\r\n    return this.http\r\n      .post<void>(url, {})\r\n      .pipe(catchError(this.errorHandlingService.handleError));\r\n  }\r\n\r\n  /**\r\n   * Deletes guest data for a registered user.\r\n   * @returns An Observable of void.\r\n   */\r\n  deleteGuestDataForRegisteredUser(): Observable<void> {\r\n    const url = `${this.baseUrl}/deleteGuestDataForRegisteredUser`;\r\n    return this.http\r\n      .post<void>(url, {})\r\n      .pipe(catchError(this.errorHandlingService.handleError));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorHandlingService",
                        "type": "ErrorHandlingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorHandlingService",
                        "type": "ErrorHandlingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "BoardService",
            "id": "injectable-BoardService-9000986a18d4c7fb71777fa58c1aff777fe85cf5797a6964b95197efea3cdc0c39f825793c462e6070ce661dcf5c475a37013ef41fa301debed6a6171882f816",
            "file": "src/app/core/services/board.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "`${environment.baseURL}/boards`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createBoard",
                    "args": [
                        {
                            "name": "request",
                            "type": "CreateBoardRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreates a new board.\nAfter receiving success status, navigate to /board/{board-id}/{board-name-slug}.\nThe navigation should be handled in the component subscribing to this method.\n",
                    "description": "<p>Creates a new board.\nAfter receiving success status, navigate to /board/{board-id}/{board-name-slug}.\nThe navigation should be handled in the component subscribing to this method.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1792,
                                "end": 1799,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "request"
                            },
                            "type": "CreateBoardRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1786,
                                "end": 1791,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The request object containing board details.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1852,
                                "end": 1859,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable of void</p>\n"
                        }
                    ]
                },
                {
                    "name": "deleteBoard",
                    "args": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeletes a board.\n",
                    "description": "<p>Deletes a board.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 2973,
                                "end": 2980,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable of void (adjust the type based on backend response if needed).</p>\n"
                        }
                    ]
                },
                {
                    "name": "duplicateBoard",
                    "args": [
                        {
                            "name": "request",
                            "type": "CreateDuplicateBoardRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDuplicates an existing board.\n",
                    "description": "<p>Duplicates an existing board.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2145,
                                "end": 2152,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "request"
                            },
                            "type": "CreateDuplicateBoardRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2139,
                                "end": 2144,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The request object containing duplication details.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2211,
                                "end": 2218,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable of void</p>\n"
                        }
                    ]
                },
                {
                    "name": "getAllBoards",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<GetAllBoardsDetailsResponse[]>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieves all boards created by the user.\n",
                    "description": "<p>Retrieves all boards created by the user.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 856,
                                "end": 863,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable of an array of GetAllBoardsDetailsResponse.</p>\n"
                        }
                    ]
                },
                {
                    "name": "getBoardById",
                    "args": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GetBoardFullDetailsResponse>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieves full details of a board by its ID.\n",
                    "description": "<p>Retrieves full details of a board by its ID.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1214,
                                "end": 1221,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "boardId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1208,
                                "end": 1213,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The ID of the board.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1250,
                                "end": 1257,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable of GetBoardFullDetailsResponse.</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateBoard",
                    "args": [
                        {
                            "name": "request",
                            "type": "UpdateBoardRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates an existing board.\n",
                    "description": "<p>Updates an existing board.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2550,
                                "end": 2557,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "request"
                            },
                            "type": "UpdateBoardRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2544,
                                "end": 2549,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The request object containing updated board details.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2618,
                                "end": 2625,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable of void</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n// Import interfaces from the shared models\r\nimport {\r\n  GetAllBoardsDetailsResponse,\r\n  GetBoardFullDetailsResponse,\r\n  CreateDuplicateBoardRequest,\r\n  CreateBoardRequest,\r\n  UpdateBoardRequest,\r\n} from '../../shared/models/board.model';\r\nimport { environment } from '../../../environments/environment';\r\nimport { ErrorHandlingService } from './error-handling.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BoardService {\r\n  private baseUrl = `${environment.baseURL}/boards`;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private errorHandlingService: ErrorHandlingService\r\n  ) {}\r\n\r\n  /**\r\n   * Retrieves all boards created by the user.\r\n   * @returns An Observable of an array of GetAllBoardsDetailsResponse.\r\n   */\r\n  getAllBoards(): Observable<GetAllBoardsDetailsResponse[]> {\r\n    return this.http\r\n      .get<GetAllBoardsDetailsResponse[]>(this.baseUrl)\r\n      .pipe(catchError(this.errorHandlingService.handleError));\r\n  }\r\n\r\n  /**\r\n   * Retrieves full details of a board by its ID.\r\n   * @param boardId The ID of the board.\r\n   * @returns An Observable of GetBoardFullDetailsResponse.\r\n   */\r\n  getBoardById(boardId: string): Observable<GetBoardFullDetailsResponse> {\r\n    const url = `${this.baseUrl}/${boardId}`;\r\n    return this.http\r\n      .get<GetBoardFullDetailsResponse>(url)\r\n      .pipe(catchError(this.errorHandlingService.handleError));\r\n  }\r\n\r\n  /**\r\n   * Creates a new board.\r\n   * After receiving success status, navigate to /board/{board-id}/{board-name-slug}.\r\n   * The navigation should be handled in the component subscribing to this method.\r\n   * @param request The request object containing board details.\r\n   * @returns An Observable of void\r\n   */\r\n  createBoard(request: CreateBoardRequest): Observable<void> {\r\n    return this.http\r\n      .post<void>(this.baseUrl, request)\r\n      .pipe(catchError(this.errorHandlingService.handleError));\r\n  }\r\n\r\n  /**\r\n   * Duplicates an existing board.\r\n   * @param request The request object containing duplication details.\r\n   * @returns An Observable of void\r\n   */\r\n  duplicateBoard(request: CreateDuplicateBoardRequest): Observable<void> {\r\n    const url = `${this.baseUrl}/duplicate`;\r\n    return this.http\r\n      .post<void>(url, request)\r\n      .pipe(catchError(this.errorHandlingService.handleError));\r\n  }\r\n\r\n  /**\r\n   * Updates an existing board.\r\n   * @param request The request object containing updated board details.\r\n   * @returns An Observable of void\r\n   */\r\n  updateBoard(request: UpdateBoardRequest): Observable<void> {\r\n    return this.http\r\n      .put<void>(this.baseUrl, request)\r\n      .pipe(catchError(this.errorHandlingService.handleError));\r\n  }\r\n\r\n  /**\r\n   * Deletes a board.\r\n   * @param request The request object containing the ID of the board to delete.\r\n   * @returns An Observable of void (adjust the type based on backend response if needed).\r\n   */\r\n  deleteBoard(boardId: string): Observable<void> {\r\n    const url = `${this.baseUrl}/${boardId}`;\r\n    return this.http\r\n      .delete<void>(url)\r\n      .pipe(catchError(this.errorHandlingService.handleError));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorHandlingService",
                        "type": "ErrorHandlingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorHandlingService",
                        "type": "ErrorHandlingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ColorService",
            "id": "injectable-ColorService-ce770006476e8956330462b5ed7cc4cae12a06332c26456e03e9f540e0092b4f1c87039fa07303009739840946c2be9c356eea34a1cc57cb22d49b4d6aec1955",
            "file": "src/app/core/services/color.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "`${environment.baseURL}/colors`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getAllColors",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<GetColorsResponse[]>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieves all colors.\n",
                    "description": "<p>Retrieves all colors.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 711,
                                "end": 718,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable of an array of GetColorsResponse.</p>\n"
                        }
                    ]
                },
                {
                    "name": "getColorHexById",
                    "args": [
                        {
                            "name": "colorId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieves the HEX code of a color by its ID.\n",
                    "description": "<p>Retrieves the HEX code of a color by its ID.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1039,
                                "end": 1046,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "colorId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1033,
                                "end": 1038,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The ID of the color.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1075,
                                "end": 1082,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable of string representing the HEX code.</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n// Import interfaces from the shared models\r\nimport { GetColorsResponse } from '../../shared/models/color.model';\r\nimport { environment } from '../../../environments/environment';\r\nimport { ErrorHandlingService } from './error-handling.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ColorService {\r\n  private baseUrl = `${environment.baseURL}/colors`;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private errorHandlingService: ErrorHandlingService\r\n  ) {}\r\n\r\n  /**\r\n   * Retrieves all colors.\r\n   * @returns An Observable of an array of GetColorsResponse.\r\n   */\r\n  getAllColors(): Observable<GetColorsResponse[]> {\r\n    return this.http\r\n      .get<GetColorsResponse[]>(this.baseUrl)\r\n      .pipe(catchError(this.errorHandlingService.handleError));\r\n  }\r\n\r\n  /**\r\n   * Retrieves the HEX code of a color by its ID.\r\n   * @param colorId The ID of the color.\r\n   * @returns An Observable of string representing the HEX code.\r\n   */\r\n  getColorHexById(colorId: string): Observable<string> {\r\n    const url = `${this.baseUrl}/${colorId}`;\r\n    return this.http\r\n      .get<string>(url)\r\n      .pipe(catchError(this.errorHandlingService.handleError));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorHandlingService",
                        "type": "ErrorHandlingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorHandlingService",
                        "type": "ErrorHandlingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ErrorHandlingService",
            "id": "injectable-ErrorHandlingService-c931303a1ba22015056aff5dee1f4d1555a1c7d0bd27f182666bfb1e6ad73d51773490d1e65607f777e086d0d5a71ee9c22d852b8a7e048f079a0d7d247a8361",
            "file": "src/app/core/services/error-handling.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ErrorHandlingService {\r\n  handleError(error: HttpErrorResponse): Observable<never> {\r\n    let errorMessage = '';\r\n\r\n    if (error.error instanceof ErrorEvent) {\r\n      // Client-side/network error\r\n      errorMessage = `Client-side error: ${error.error.message}`;\r\n    } else {\r\n      // Server-side error\r\n      errorMessage = `Server-side error: ${error.status} - ${error.message}`;\r\n    }\r\n\r\n    // Log the error (could be sent to a remote logging service)\r\n    console.error(errorMessage);\r\n\r\n    // Return a user-friendly error message\r\n    return throwError(\r\n      () => new Error('An error occurred. Please try again later.')\r\n    );\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ListService",
            "id": "injectable-ListService-be87a5621f91c13b972cd41e4f09368d17a6d6bdfe697e9489bbf58ef02ddb3e12b61d7485660e1b14ecb88cdf983a814653ba0b37ff16c2cb5e74d8590fe4fe",
            "file": "src/app/core/services/list.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "`${environment.baseURL}/lists`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createList",
                    "args": [
                        {
                            "name": "request",
                            "type": "CreateListRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreates a new list.\nBy default, the position of the list will be the highest, making it the furthest on the right\n(where 1 is the first list on the left, and each incrementing number is to the right)\n",
                    "description": "<p>Creates a new list.\nBy default, the position of the list will be the highest, making it the furthest on the right\n(where 1 is the first list on the left, and each incrementing number is to the right)</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2206,
                                "end": 2213,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "request"
                            },
                            "type": "CreateListRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2200,
                                "end": 2205,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The request object containing list details.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2265,
                                "end": 2272,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable of void.</p>\n"
                        }
                    ]
                },
                {
                    "name": "deleteList",
                    "args": [
                        {
                            "name": "listId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeletes a list by its ID.\nThis will update the relevant surrounding lists' positions in the backend.\n",
                    "description": "<p>Deletes a list by its ID.\nThis will update the relevant surrounding lists&#39; positions in the backend.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3502,
                                "end": 3508,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "listId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3496,
                                "end": 3501,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The ID of the list to delete.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 3546,
                                "end": 3553,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable of void.</p>\n"
                        }
                    ]
                },
                {
                    "name": "duplicateList",
                    "args": [
                        {
                            "name": "request",
                            "type": "CreateDuplicateListRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDuplicates an existing list.\nBy default, the position of the duplicated list will be to the right of the original list. So it will shift all other lists to the right of it. If the original list is at position 3, the duplicated list will be at position 4. So all the following lists will be shifted.\n",
                    "description": "<p>Duplicates an existing list.\nBy default, the position of the duplicated list will be to the right of the original list. So it will shift all other lists to the right of it. If the original list is at position 3, the duplicated list will be at position 4. So all the following lists will be shifted.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1616,
                                "end": 1623,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "request"
                            },
                            "type": "CreateDuplicateListRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1610,
                                "end": 1615,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The request object containing duplication details.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1682,
                                "end": 1689,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable of void.</p>\n"
                        }
                    ]
                },
                {
                    "name": "getAllLists",
                    "args": [
                        {
                            "name": "boardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GetAllListsDetailsResponse[]>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieves all lists within a board by board ID.\nThe lists are ordered based on their position.\n",
                    "description": "<p>Retrieves all lists within a board by board ID.\nThe lists are ordered based on their position.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 912,
                                "end": 919,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "boardId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 906,
                                "end": 911,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The ID of the board.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 948,
                                "end": 955,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable of an array of GetAllListsDetailsResponse.</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateList",
                    "args": [
                        {
                            "name": "request",
                            "type": "UpdateListRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates an existing list's name.\n",
                    "description": "<p>Updates an existing list&#39;s name.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2560,
                                "end": 2567,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "request"
                            },
                            "type": "UpdateListRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2554,
                                "end": 2559,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The request object containing updated list details.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2627,
                                "end": 2634,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable of void.</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateListPosition",
                    "args": [
                        {
                            "name": "request",
                            "type": "UpdateListPositionRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChanges the position of a list.\nThis will update the relevant surrounding lists' positions in the backend.\n",
                    "description": "<p>Changes the position of a list.\nThis will update the relevant surrounding lists&#39; positions in the backend.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3001,
                                "end": 3008,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "request"
                            },
                            "type": "UpdateListPositionRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2995,
                                "end": 3000,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The request object containing the list ID and new position.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 3076,
                                "end": 3083,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable of void.</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n// Import interfaces from the shared models\r\nimport {\r\n  GetAllListsDetailsResponse,\r\n  CreateDuplicateListRequest,\r\n  CreateListRequest,\r\n  UpdateListRequest,\r\n  UpdateListPositionRequest,\r\n} from '../../shared/models/list.model';\r\nimport { environment } from '../../../environments/environment';\r\nimport { ErrorHandlingService } from './error-handling.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ListService {\r\n  private baseUrl = `${environment.baseURL}/lists`;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private errorHandlingService: ErrorHandlingService\r\n  ) {}\r\n\r\n  /**\r\n   * Retrieves all lists within a board by board ID.\r\n   * The lists are ordered based on their position.\r\n   * @param boardId The ID of the board.\r\n   * @returns An Observable of an array of GetAllListsDetailsResponse.\r\n   */\r\n  getAllLists(boardId: string): Observable<GetAllListsDetailsResponse[]> {\r\n    const url = `${this.baseUrl}/${boardId}`;\r\n    return this.http\r\n      .get<GetAllListsDetailsResponse[]>(url)\r\n      .pipe(catchError(this.errorHandlingService.handleError));\r\n  }\r\n\r\n  /**\r\n   * Duplicates an existing list. \r\n   * By default, the position of the duplicated list will be to the right of the original list. So it will shift all other lists to the right of it. If the original list is at position 3, the duplicated list will be at position 4. So all the following lists will be shifted.\r\n   * @param request The request object containing duplication details.\r\n   * @returns An Observable of void.\r\n   */\r\n  duplicateList(request: CreateDuplicateListRequest): Observable<void> {\r\n    const url = `${this.baseUrl}/duplicate`;\r\n    return this.http\r\n      .post<void>(url, request)\r\n      .pipe(catchError(this.errorHandlingService.handleError));\r\n  }\r\n\r\n  /**\r\n   * Creates a new list. \r\n   * By default, the position of the list will be the highest, making it the furthest on the right\r\n   * (where 1 is the first list on the left, and each incrementing number is to the right)\r\n   * @param request The request object containing list details.\r\n   * @returns An Observable of void.\r\n   */\r\n  createList(request: CreateListRequest): Observable<void> {\r\n    return this.http\r\n      .post<void>(this.baseUrl, request)\r\n      .pipe(catchError(this.errorHandlingService.handleError));\r\n  }\r\n\r\n  /**\r\n   * Updates an existing list's name.\r\n   * @param request The request object containing updated list details.\r\n   * @returns An Observable of void.\r\n   */\r\n  updateList(request: UpdateListRequest): Observable<void> {\r\n    return this.http\r\n      .put<void>(this.baseUrl, request)\r\n      .pipe(catchError(this.errorHandlingService.handleError));\r\n  }\r\n\r\n  /**\r\n   * Changes the position of a list.\r\n   * This will update the relevant surrounding lists' positions in the backend.\r\n   * @param request The request object containing the list ID and new position.\r\n   * @returns An Observable of void.\r\n   */\r\n  updateListPosition(request: UpdateListPositionRequest): Observable<void> {\r\n    const url = `${this.baseUrl}/changePosition`;\r\n    return this.http\r\n      .put<void>(url, request)\r\n      .pipe(catchError(this.errorHandlingService.handleError));\r\n  }\r\n\r\n  /**\r\n   * Deletes a list by its ID.\r\n   * This will update the relevant surrounding lists' positions in the backend.\r\n   * @param listId The ID of the list to delete.\r\n   * @returns An Observable of void.\r\n   */\r\n  deleteList(listId: string): Observable<void> {\r\n    const url = `${this.baseUrl}/${listId}`;\r\n    return this.http\r\n      .delete<void>(url)\r\n      .pipe(catchError(this.errorHandlingService.handleError));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorHandlingService",
                        "type": "ErrorHandlingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorHandlingService",
                        "type": "ErrorHandlingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TicketService",
            "id": "injectable-TicketService-0b5458c0d8e93f45f44215beb42d66d9c56fd12dff9e7cc0a8699bb62ac2801d83c6643870f0b43172a50d1758122c7e33345b21f83d54ce27eda4fa2fae33f4",
            "file": "src/app/core/services/ticket.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "`${environment.baseURL}/tickets`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createTicket",
                    "args": [
                        {
                            "name": "request",
                            "type": "CreateTicketRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreates a new ticket.\nIn the backend, this ticket will always be assigned to the end of the list it is created. So, if the lowest position is currently 5, then the position of this ticket will be 6 (representing the bottom of the list)\n",
                    "description": "<p>Creates a new ticket.\nIn the backend, this ticket will always be assigned to the end of the list it is created. So, if the lowest position is currently 5, then the position of this ticket will be 6 (representing the bottom of the list)</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1453,
                                "end": 1460,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "request"
                            },
                            "type": "CreateTicketRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1447,
                                "end": 1452,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The request object containing ticket details.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1514,
                                "end": 1521,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable of void.</p>\n"
                        }
                    ]
                },
                {
                    "name": "deleteTicket",
                    "args": [
                        {
                            "name": "ticketId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeletes a ticket by its ID.\nIn the backend, depending on which positiono of a list the deleted ticket was in, it will need to adjust the relevant tickets' positions in the same list.\n",
                    "description": "<p>Deletes a ticket by its ID.\nIn the backend, depending on which positiono of a list the deleted ticket was in, it will need to adjust the relevant tickets&#39; positions in the same list.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3008,
                                "end": 3016,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "ticketId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3002,
                                "end": 3007,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The ID of the ticket to delete.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 3056,
                                "end": 3063,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable of void.</p>\n"
                        }
                    ]
                },
                {
                    "name": "getTicketById",
                    "args": [
                        {
                            "name": "ticketId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GetTicketDetailsResponse>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieves ticket details by ticket ID.\n",
                    "description": "<p>Retrieves ticket details by ticket ID.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 829,
                                "end": 837,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "ticketId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 823,
                                "end": 828,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The ID of the ticket.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 867,
                                "end": 874,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable of GetTicketDetailsResponse.</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateTicket",
                    "args": [
                        {
                            "name": "request",
                            "type": "UpdateTicketRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates an existing ticket.\n",
                    "description": "<p>Updates an existing ticket.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2484,
                                "end": 2491,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "request"
                            },
                            "type": "UpdateTicketRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2478,
                                "end": 2483,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The request object containing updated ticket details.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2553,
                                "end": 2560,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable of void.</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateTicketPosition",
                    "args": [
                        {
                            "name": "request",
                            "type": "UpdateTicketPositionRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates the position of a ticket.\nIf newPosition is not provided, the backend defaults it to 1.\nIn backend, depending on the new position of the ticket and the list it goes into, it will need to update the position of all other tickets accordingly.\n",
                    "description": "<p>Updates the position of a ticket.\nIf newPosition is not provided, the backend defaults it to 1.\nIn backend, depending on the new position of the ticket and the list it goes into, it will need to update the position of all other tickets accordingly.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2041,
                                "end": 2048,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "request"
                            },
                            "type": "UpdateTicketPositionRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2035,
                                "end": 2040,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The request object containing ticket ID, list ID, and optional new position.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2133,
                                "end": 2140,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable of void.</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n// Import interfaces from the shared models\r\nimport {\r\n  GetTicketDetailsResponse,\r\n  CreateTicketRequest,\r\n  UpdateTicketPositionRequest,\r\n  UpdateTicketRequest,\r\n} from '../../shared/models/ticket.model';\r\nimport { environment } from '../../../environments/environment';\r\nimport { ErrorHandlingService } from './error-handling.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TicketService {\r\n  private baseUrl = `${environment.baseURL}/tickets`;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private errorHandlingService: ErrorHandlingService\r\n  ) {}\r\n\r\n  /**\r\n   * Retrieves ticket details by ticket ID.\r\n   * @param ticketId The ID of the ticket.\r\n   * @returns An Observable of GetTicketDetailsResponse.\r\n   */\r\n  getTicketById(ticketId: string): Observable<GetTicketDetailsResponse> {\r\n    const url = `${this.baseUrl}/${ticketId}`;\r\n    return this.http\r\n      .get<GetTicketDetailsResponse>(url)\r\n      .pipe(catchError(this.errorHandlingService.handleError));\r\n  }\r\n\r\n  /**\r\n   * Creates a new ticket.\r\n   * In the backend, this ticket will always be assigned to the end of the list it is created. So, if the lowest position is currently 5, then the position of this ticket will be 6 (representing the bottom of the list)\r\n   * @param request The request object containing ticket details.\r\n   * @returns An Observable of void.\r\n   */\r\n  createTicket(request: CreateTicketRequest): Observable<void> {\r\n    return this.http\r\n      .post<void>(this.baseUrl, request)\r\n      .pipe(catchError(this.errorHandlingService.handleError));\r\n  }\r\n\r\n  /**\r\n   * Updates the position of a ticket.\r\n   * If newPosition is not provided, the backend defaults it to 1.\r\n   * In backend, depending on the new position of the ticket and the list it goes into, it will need to update the position of all other tickets accordingly.\r\n   * @param request The request object containing ticket ID, list ID, and optional new position.\r\n   * @returns An Observable of void.\r\n   */\r\n  updateTicketPosition(request: UpdateTicketPositionRequest): Observable<void> {\r\n    const url = `${this.baseUrl}/changePosition`;\r\n    return this.http\r\n      .put<void>(url, request)\r\n      .pipe(catchError(this.errorHandlingService.handleError));\r\n  }\r\n\r\n  /**\r\n   * Updates an existing ticket.\r\n   * @param request The request object containing updated ticket details.\r\n   * @returns An Observable of void.\r\n   */\r\n  updateTicket(request: UpdateTicketRequest): Observable<void> {\r\n    return this.http\r\n      .put<void>(this.baseUrl, request)\r\n      .pipe(catchError(this.errorHandlingService.handleError));\r\n  }\r\n\r\n  /**\r\n   * Deletes a ticket by its ID.\r\n   * In the backend, depending on which positiono of a list the deleted ticket was in, it will need to adjust the relevant tickets' positions in the same list. \r\n   * @param ticketId The ID of the ticket to delete.\r\n   * @returns An Observable of void.\r\n   */\r\n  deleteTicket(ticketId: string): Observable<void> {\r\n    const url = `${this.baseUrl}/${ticketId}`;\r\n    return this.http\r\n      .delete<void>(url)\r\n      .pipe(catchError(this.errorHandlingService.handleError));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorHandlingService",
                        "type": "ErrorHandlingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorHandlingService",
                        "type": "ErrorHandlingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-e1e0d8ef5faa6ea10245d288989920022433a43eda9cb042a03c0e9309e764d247312cdb00146fdbdc7aa519e5c23ee6bf8555b2f20e35fae576aef4d5453852",
            "file": "src/app/core/services/user.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "`${environment.baseURL}/users`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getUsername",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieves the username of the logged-in user.\n",
                    "description": "<p>Retrieves the username of the logged-in user.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 618,
                                "end": 625,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable of string.</p>\n"
                        }
                    ]
                },
                {
                    "name": "isRegistered",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if the user is registered.\n",
                    "description": "<p>Checks if the user is registered.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 879,
                                "end": 886,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable of { isRegistered: boolean }.</p>\n"
                        }
                    ]
                },
                {
                    "name": "registerUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters a new user.\n",
                    "description": "<p>Registers a new user.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1226,
                                "end": 1233,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable of void.</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { environment } from '../../../environments/environment';\r\nimport { ErrorHandlingService } from './error-handling.service';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserService {\r\n  private baseUrl = `${environment.baseURL}/users`;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private errorHandlingService: ErrorHandlingService\r\n  ) {}\r\n\r\n  /**\r\n   * Retrieves the username of the logged-in user.\r\n   * @returns An Observable of string.\r\n   */\r\n  getUsername(): Observable<string> {\r\n    return this.http\r\n      .get<string>(this.baseUrl)\r\n      .pipe(catchError(this.errorHandlingService.handleError));\r\n  }\r\n\r\n  /**\r\n   * Checks if the user is registered.\r\n   * @returns An Observable of { isRegistered: boolean }.\r\n   */\r\n  isRegistered(): Observable<{ isRegistered: boolean }> {\r\n    const url = `${this.baseUrl}/isRegistered`;\r\n    return this.http\r\n      .get<{ isRegistered: boolean }>(url)\r\n      .pipe(catchError(this.errorHandlingService.handleError));\r\n  }\r\n\r\n  /**\r\n   * Registers a new user.\r\n   * @returns An Observable of void.\r\n   */\r\n  registerUser(): Observable<void> {\r\n    const url = `${this.baseUrl}/register`;\r\n    return this.http\r\n      .post<void>(url, {})\r\n      .pipe(catchError(this.errorHandlingService.handleError));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorHandlingService",
                        "type": "ErrorHandlingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorHandlingService",
                        "type": "ErrorHandlingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UtilsService",
            "id": "injectable-UtilsService-1965c8579c5fc9dbbd703d989344a3b49e1dc75d01db5a148dfe323ebc48445d0844b9cedf3693747f7e93f256ce8950c7907d6840843cab80f42ea4ccfb2eca",
            "file": "src/app/shared/utils/utils.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "formatDateTime",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UtilsService {\r\n  \r\n  // Helper function for formatting date and time into DD/MM/YYYY HH:MM AM/PM\r\n  formatDateTime(date: Date): string {\r\n    const day = String(date.getDate()).padStart(2, '0')\r\n    const month = String(date.getMonth() + 1).padStart(2, '0') // Months are 0-based\r\n    const year = date.getFullYear()\r\n\r\n    let hours = date.getHours()\r\n    const minutes = String(date.getMinutes()).padStart(2, '0')\r\n    const ampm = hours >= 12 ? 'PM' : 'AM'\r\n\r\n    hours = hours % 12\r\n    hours = hours ? hours : 12 // Handle midnight (0 should be 12)\r\n\r\n    const formattedHours = String(hours).padStart(2, '0')\r\n\r\n    return `${day}/${month}/${year} ${formattedHours}:${minutes}${ampm}`\r\n}\r\n\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [
        {
            "name": "AuthInterceptor",
            "id": "injectable-AuthInterceptor-3877dac2dd432d962bc3d187d491f41b56994722d07e986d075045de72e6eebdb202cb7006defb2b683cb82cf35ea7faf52e899bb9eb66ccacd7c851f96b2057",
            "file": "src/app/auth-interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n} from '@angular/common/http';\r\nimport { AuthService } from '@auth0/auth0-angular';\r\nimport { Observable, from } from 'rxjs';\r\nimport { switchMap, take } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  constructor(private auth: AuthService) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    // Check if the user is authenticated\r\n    return this.auth.isAuthenticated$.pipe(\r\n      take(1),\r\n      switchMap((isAuthenticated) => {\r\n        if (isAuthenticated) {\r\n          // If authenticated, get the token and clone the request with the Authorization header\r\n          return from(this.auth.getAccessTokenSilently()).pipe(\r\n            switchMap((token) => {\r\n              const authReq = req.clone({\r\n                setHeaders: { Authorization: `Bearer ${token}` },\r\n                withCredentials: false, // Ensure credentials are not included\r\n              });\r\n              return next.handle(authReq);\r\n            })\r\n          );\r\n        } else {\r\n          // If not authenticated, clone the request with withCredentials: true\r\n          const guestReq = req.clone({\r\n            withCredentials: true,\r\n          });\r\n          return next.handle(guestReq);\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "interceptor"
        }
    ],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-152dd34110cbe0831b92a3e9ab4ffefffd474ab09e6dbe2d064b669937d4c8a8499c163c92c5e6841c4c528a5ccb154167193e41d27c0f6427c04a11353c28b6",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "auth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Auth0Service",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isGuest",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "title",
                    "defaultValue": "'frontend'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "checkGuestCookie",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "continueAsGuest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteGuestCookie",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteGuestData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "deleteGuestDataForRegisteredUser",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openGuestDataDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerUser",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "transferGuestData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "MaterialSharedModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "GuestDataDialogComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { AuthService as Auth0Service } from '@auth0/auth0-angular';\r\nimport { firstValueFrom } from 'rxjs';\r\nimport { CommonModule } from '@angular/common';\r\nimport { GuestDataDialogComponent } from './shared/components/guest-data-dialog/guest-data-dialog.component';\r\nimport { MaterialSharedModule } from './shared/material/material.shared';\r\nimport { MatDialog } from '@angular/material/dialog';\r\n\r\n// Import the new services\r\nimport { UserService } from './core/services/user.service';\r\nimport { AuthService } from './core/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [\r\n    RouterOutlet,\r\n    MaterialSharedModule,\r\n    CommonModule,\r\n    GuestDataDialogComponent, // Include the dialog component\r\n  ],\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  title = 'frontend';\r\n  isGuest: boolean = false;\r\n\r\n  constructor(\r\n    public auth: Auth0Service,\r\n    private dialog: MatDialog,\r\n    private userService: UserService,\r\n    private authService: AuthService\r\n  ) {\r\n    // Subscribe to authentication status\r\n    this.auth.isAuthenticated$.subscribe(async (isAuthenticated) => {\r\n      if (isAuthenticated) {\r\n        this.isGuest = false;\r\n\r\n        try {\r\n          // Check if user is registered\r\n          const isRegisteredResponse = await firstValueFrom(\r\n            this.userService.isRegistered()\r\n          );\r\n          const isRegistered = isRegisteredResponse.isRegistered;\r\n\r\n          // Check if GuestId cookie exists\r\n          const guestCookieExists = this.checkGuestCookie();\r\n\r\n          console.log('IsRegistered response:', isRegisteredResponse);\r\n          console.log('Guest cookie exists:', guestCookieExists);\r\n\r\n          if (guestCookieExists) {\r\n            // Check if there is guest data associated with the GuestId\r\n            console.log('Calling hasGuestData endpoint...');\r\n            const hasGuestDataResponse = await firstValueFrom(\r\n              this.authService.hasGuestData()\r\n            );\r\n            console.log('HasGuestData response:', hasGuestDataResponse);\r\n            const hasGuestData = hasGuestDataResponse.hasGuestData;\r\n\r\n            if (!isRegistered && hasGuestData) {\r\n              // Show dialog to transfer guest data\r\n              console.log('Opening dialog...');\r\n              this.openGuestDataDialog();\r\n            } else if (isRegistered && hasGuestData) {\r\n              // User is registered, delete guest data without prompting\r\n              console.log('Deleting guest data...');\r\n              await this.deleteGuestDataForRegisteredUser();\r\n            } else {\r\n              // No guest data to handle\r\n              if (!isRegistered) {\r\n                // Register the user\r\n                console.log('Registering user with guest cookie');\r\n                await this.registerUser();\r\n              }\r\n            }\r\n          } else {\r\n            // No GuestId cookie, but if user is not registered, register them\r\n            if (!isRegistered) {\r\n              console.log('Registering user without cookie');\r\n              await this.registerUser();\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error('Error during authentication handling:', error);\r\n        }\r\n      } else {\r\n        // Check if GuestId cookie exists\r\n        this.isGuest = this.checkGuestCookie();\r\n      }\r\n    });\r\n  }\r\n\r\n  // Method to trigger login\r\n  login() {\r\n    this.auth.loginWithRedirect();\r\n  }\r\n\r\n  // Method to trigger logout\r\n  logout() {\r\n    // Delete the GuestId cookie if it exists\r\n    if (this.checkGuestCookie()) {\r\n      this.deleteGuestCookie();\r\n      this.isGuest = false;\r\n    }\r\n\r\n    this.auth.logout({ logoutParams: { returnTo: window.location.origin } });\r\n  }\r\n\r\n  // Method to continue as guest\r\n  continueAsGuest() {\r\n    // Call the backend API to generate a GuestId and set the cookie\r\n    this.authService.generateGuestId().subscribe({\r\n      next: (response) => {\r\n        console.log('Guest session initiated:', response);\r\n        this.isGuest = true;\r\n        // Optionally, navigate to a specific route\r\n      },\r\n      error: (error) => {\r\n        console.error('Failed to initiate guest session:', error);\r\n      },\r\n    });\r\n  }\r\n\r\n  // Method to check if GuestId cookie exists\r\n  checkGuestCookie(): boolean {\r\n    return document.cookie\r\n      .split(';')\r\n      .some((item) => item.trim().startsWith('GuestId='));\r\n  }\r\n\r\n  // Method to transfer guest data to Auth0 user\r\n  async transferGuestData() {\r\n    try {\r\n      await firstValueFrom(this.authService.transferGuestData());\r\n      console.log('Guest data transferred successfully.');\r\n      this.isGuest = false;\r\n    } catch (error) {\r\n      console.error('Failed to transfer guest data:', error);\r\n    }\r\n  }\r\n\r\n  // Method to delete guest data and remove GuestId cookie\r\n  async deleteGuestData() {\r\n    try {\r\n      await firstValueFrom(this.authService.deleteGuestData());\r\n      console.log('Guest data deleted successfully.');\r\n      this.isGuest = false;\r\n    } catch (error) {\r\n      console.error('Failed to delete guest data:', error);\r\n    }\r\n  }\r\n\r\n  // Method to delete the GuestId cookie\r\n  deleteGuestCookie() {\r\n    document.cookie =\r\n      'GuestId=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';\r\n  }\r\n\r\n  // Method to open the guest data transfer dialog\r\n  openGuestDataDialog() {\r\n    const dialogRef = this.dialog.open(GuestDataDialogComponent);\r\n\r\n    dialogRef.afterClosed().subscribe(async (result) => {\r\n      if (result === true) {\r\n        // User chose to transfer data\r\n        await this.transferGuestData();\r\n      } else {\r\n        // User chose not to transfer data\r\n        await this.deleteGuestData();\r\n      }\r\n\r\n      // Register the user after handling guest data\r\n      await this.registerUser();\r\n    });\r\n  }\r\n\r\n  // Method to register the user\r\n  async registerUser() {\r\n    try {\r\n      await firstValueFrom(this.userService.registerUser());\r\n      console.log('User registered successfully.');\r\n    } catch (error) {\r\n      console.error('Failed to register user:', error);\r\n    }\r\n  }\r\n\r\n  // Method to delete guest data for a registered user\r\n  async deleteGuestDataForRegisteredUser() {\r\n    try {\r\n      await firstValueFrom(this.authService.deleteGuestDataForRegisteredUser());\r\n      console.log('Guest data deleted for registered user.');\r\n      this.isGuest = false;\r\n    } catch (error) {\r\n      console.error('Failed to delete guest data for registered user:', error);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "Auth0Service",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "Auth0Service",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"container\">\r\n\r\n  <!-- Authenticated user -->\r\n  <div *ngIf=\"(auth.isAuthenticated$ | async) && !isGuest\">\r\n    <p>You are logged in!</p>\r\n    <button mat-button (click)=\"logout()\">Logout</button>\r\n  </div>\r\n\r\n  <!-- Guest user -->\r\n  <div *ngIf=\"isGuest\">\r\n    <p>You are continuing as a guest.</p>\r\n    <!-- No logout button for guests -->\r\n    <button mat-button (click)=\"login()\">Login</button>\r\n  </div>\r\n\r\n  <!-- Not authenticated and not guest -->\r\n  <div *ngIf=\"!(auth.isAuthenticated$ | async) && !isGuest\">\r\n    <p>You are not logged in.</p>\r\n    <button mat-button (click)=\"login()\">Login</button>\r\n    <button mat-button (click)=\"continueAsGuest()\">Continue as Guest</button>\r\n  </div>\r\n</div>\r\n\r\n<!-- Router outlet for your routed components -->\r\n<router-outlet></router-outlet>\r\n"
        },
        {
            "name": "BackgroundSelectionPanelComponent",
            "id": "component-BackgroundSelectionPanelComponent-4e1f6f6b71c9f676581f62d4d7c53ef6a7c23218be8dc5b02f1d9d7aa015056a7317c67be66e2e595684b8fc7f10ebf690a5039bfef1dd477f4baf112fbbf21a",
            "file": "src/app/shared/components/background-selection-panel/background-selection-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-background-selection-panel",
            "styleUrls": [
                "./background-selection-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./background-selection-panel.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "selectedColorId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "number | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "colorSelected",
                    "defaultValue": "new EventEmitter<number | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "colors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GetColorsResponse[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "getGradient",
                    "args": [
                        {
                            "name": "colorId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "colorId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRows",
                    "args": [],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onColorClick",
                    "args": [
                        {
                            "name": "colorId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "colorId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { GetColorsResponse } from '../../models/color.model';\r\nimport { ColorService } from '../../../core/services/color.service';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-background-selection-panel',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './background-selection-panel.component.html',\r\n  styleUrls: ['./background-selection-panel.component.scss'],\r\n})\r\nexport class BackgroundSelectionPanelComponent implements OnInit {\r\n  @Input() selectedColorId: number | null = null; // Initial selected color ID or null for no selection\r\n  @Output() colorSelected = new EventEmitter<number | null>(); // Emits color ID or null on selection\r\n\r\n  colors: GetColorsResponse[] = []; // Variable to store colors\r\n\r\n  constructor(private colorService: ColorService) {}\r\n\r\n  ngOnInit() {\r\n    this.colorService.getAllColors().subscribe({\r\n      next: (data) => {\r\n        this.colors = data; // Store the colors received from the service\r\n      },\r\n      error: (error) => {\r\n        console.error('Failed to fetch colors:', error); // Handle any errors here\r\n      },\r\n    });\r\n  }\r\n\r\n  onColorClick(colorId: number) {\r\n    if (this.selectedColorId === colorId) {\r\n      this.selectedColorId = null; // Deselect if the same color is clicked\r\n      this.colorSelected.emit(null);\r\n    } else {\r\n      this.selectedColorId = colorId; // Select a new color\r\n      this.colorSelected.emit(colorId);\r\n    }\r\n  }\r\n\r\n  // Helper method to divide colors into rows of 2\r\n  getRows(): GetColorsResponse[][] {\r\n    const rows: GetColorsResponse[][] = [];\r\n    for (let i = 0; i < this.colors.length; i += 2) {\r\n      rows.push(this.colors.slice(i, i + 2));\r\n    }\r\n    return rows;\r\n  }\r\n\r\n  // Method to get gradient style based on color ID\r\n  getGradient(colorId: number): string {\r\n    return `var(--gradient-${colorId})`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../assets/styles/main.scss';\r\n\r\n.colors-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n  background: $neutral-lighter;\r\n  width: min-content;\r\n  padding: 8px;\r\n  border-radius: 8px;\r\n}\r\n\r\n.color-row {\r\n  display: flex;\r\n  gap: 8px;\r\n}\r\n\r\n.color-box {\r\n  width: 100px;\r\n  height: 50px;\r\n  border-radius: 0.7em;\r\n  cursor: pointer;\r\n  transition: border 0.2s ease;\r\n  background-size: cover;\r\n  background-position: center;\r\n\r\n  &.selected {\r\n    border: 3px solid $background;\r\n  }\r\n}\r\n",
                    "styleUrl": "./background-selection-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"colors-container\">\r\n  <div class=\"color-row\" *ngFor=\"let row of getRows()\">\r\n    <div\r\n      *ngFor=\"let color of row\"\r\n      class=\"color-box\"\r\n      [style.background-image]=\"getGradient(color.id)\"\r\n      [class.selected]=\"color.id === selectedColorId\"\r\n      (click)=\"onColorClick(color.id)\"\r\n    ></div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "BackgroundSelectionSubmenuComponent",
            "id": "component-BackgroundSelectionSubmenuComponent-e371dcbf3eaac643cb718bbdaafb8c72f0e72185a9e3494f0541641a75e0158fd33dd1c509aa9340dd37aaed3745a7a35b86b225e4c7d5e83b0afedb654e6c8b",
            "file": "src/app/shared/components/background-selection-submenu/background-selection-submenu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-background-selection-submenu",
            "styleUrls": [
                "./background-selection-submenu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./background-selection-submenu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "buttonText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "colorId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "number | null",
                    "decorators": []
                },
                {
                    "name": "colorSelectionHeader",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter"
                },
                {
                    "name": "menuAction",
                    "defaultValue": "new EventEmitter<BackgroundSelectionSubmenuOutput>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "selectedColorId",
                    "defaultValue": "this.colorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "onActionClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCloseClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onColorSelected",
                    "args": [
                        {
                            "name": "colorId",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "colorId",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "BackgroundSelectionPanelComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { BackgroundSelectionPanelComponent } from '../background-selection-panel/background-selection-panel.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  BackgroundSelectionSubmenuInput,\r\n  BackgroundSelectionSubmenuOutput,\r\n} from '../../models/submenuInputOutput.model';\r\n\r\n@Component({\r\n  selector: 'app-background-selection-submenu',\r\n  templateUrl: './background-selection-submenu.component.html',\r\n  styleUrls: ['./background-selection-submenu.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule, BackgroundSelectionPanelComponent],\r\n})\r\nexport class BackgroundSelectionSubmenuComponent\r\n  implements BackgroundSelectionSubmenuInput\r\n{\r\n  // Inputs matching BackgroundSelectionSubmenuInput\r\n  @Input() title: string = '';\r\n  @Input() colorSelectionHeader: string = '';\r\n  @Input() buttonText: string = '';\r\n  @Input() colorId: number | null = null;\r\n\r\n  // Outputs for BackgroundSelectionSubmenuOutput\r\n  @Output() menuAction = new EventEmitter<BackgroundSelectionSubmenuOutput>();\r\n  @Output() close = new EventEmitter<void>();\r\n\r\n  // Component State\r\n  selectedColorId: number | null = this.colorId;\r\n\r\n  // Handle color selection from the child component\r\n  onColorSelected(colorId: number | null) {\r\n    this.selectedColorId = colorId;\r\n  }\r\n\r\n  // Handle action button click\r\n  onActionClicked() {\r\n    // Emit the menu action\r\n    this.menuAction.emit({\r\n      colorId: this.selectedColorId,\r\n    });\r\n    this.close.emit();\r\n  }\r\n\r\n  // Handle close button click\r\n  onCloseClicked() {\r\n    this.close.emit();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../assets/styles/main.scss';\r\n\r\n.submenu-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 16px;\r\n  background-color: $neutral-lighter;\r\n  border-radius: 8px;\r\n  width: 300px;\r\n}\r\n\r\n.submenu-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  h2 {\r\n    margin: 0;\r\n  }\r\n\r\n  .close-button {\r\n    background: none;\r\n    border: none;\r\n    font-size: 24px;\r\n    cursor: pointer;\r\n  }\r\n}\r\n\r\n.color-selection-title {\r\n  margin-top: 16px;\r\n\r\n  label {\r\n    font-weight: bold;\r\n  }\r\n}\r\n\r\n.action-button-group {\r\n  margin-top: 16px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n\r\n  button {\r\n    padding: 8px 16px;\r\n    background-color: $primary;\r\n    color: $secondary;\r\n    border: none;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n  }\r\n}\r\n",
                    "styleUrl": "./background-selection-submenu.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "BackgroundSelectionSubmenuInput"
            ],
            "templateData": "<div class=\"submenu-container\">\r\n  <!-- Header with title and close button -->\r\n  <div class=\"submenu-header\">\r\n    <h2>{{ title }}</h2>\r\n    <button class=\"close-button\" (click)=\"onCloseClicked()\">×</button>\r\n  </div>\r\n\r\n  <!-- Hardcoded subtitle -->\r\n  <div class=\"color-selection-title\">\r\n    <label>{{ colorSelectionHeader }}</label>\r\n  </div>\r\n\r\n  <!-- Color selection panel -->\r\n  <app-background-selection-panel\r\n    [selectedColorId]=\"colorId\"\r\n    (colorSelected)=\"onColorSelected($event)\"\r\n  ></app-background-selection-panel>\r\n\r\n  <!-- Action button -->\r\n  <div class=\"action-button-group\">\r\n    <button (click)=\"onActionClicked()\">\r\n      {{ buttonText }}\r\n    </button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "BoardComponent",
            "id": "component-BoardComponent-ca16a9ae5cc828bbad3df7c6c5f101c5fcc4e407690fb084c751d63e8df16cf05c9ca686ee2017bf86e44ce2dff6f8c9c81e641b5d5f7557653eec85c640d1ed",
            "file": "src/app/features/board-page/board/board.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-board",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./board.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-board',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './board.component.html',\r\n  styleUrl: './board.component.scss'\r\n})\r\nexport class BoardComponent {\r\n\r\n}\r\n",
            "styleUrl": "./board.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>board works!</p>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d7bf0323e6da130e2609e2af0117b4a8d7cd874132206af50bf43dfc37044485fe50f2867ea76525730dd195b9b95a43802a12dadc6ad5cd7bf2faa07f19f0da",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 760,
                            "end": 773,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 761,
                                "end": 769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #1ea7fd;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-3ee06fb76a4eb8cba0e42f8c7dd2eaceccfa50be4509b583b9ffb50eed56aa97edffe0764060411c3838ee6a07fad4f51bcb6f3687e0e0e7ef92e25185b60dde-1",
            "file": "src/app/shared/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-button',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './button.component.html',\r\n  styleUrl: './button.component.scss'\r\n})\r\nexport class ButtonComponent {\r\n\r\n}\r\n",
            "styleUrl": "./button.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "<p>button works!</p>\r\n"
        },
        {
            "name": "ColorSelectionPanelComponent",
            "id": "component-ColorSelectionPanelComponent-b9bcd882ae379288debe45461eadb22fb735a8f990056863c00572d14c249872eb7616500d0635f0373f03ee4514f1a69ea7f86213c7d8533c8b8ab1a827ec8e",
            "file": "src/app/shared/components/color-selection-panel/color-selection-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-color-selection-panel",
            "styleUrls": [
                "./color-selection-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./color-selection-panel.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "selectedColorId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "number | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "colorSelected",
                    "defaultValue": "new EventEmitter<number | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "colors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GetColorsResponse[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "getRows",
                    "args": [],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onColorClick",
                    "args": [
                        {
                            "name": "colorId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "colorId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { GetColorsResponse } from '../../models/color.model';\r\nimport { ColorService } from '../../../core/services/color.service';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-color-selection-panel',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './color-selection-panel.component.html',\r\n  styleUrls: ['./color-selection-panel.component.scss'],\r\n})\r\nexport class ColorSelectionPanelComponent implements OnInit {\r\n  @Input() selectedColorId: number | null = null; // Initial selected color ID or null for no selection\r\n  @Output() colorSelected = new EventEmitter<number | null>(); // Emits color ID or null on selection\r\n\r\n  colors: GetColorsResponse[] = []; // Variable to store colors\r\n\r\n  constructor(private colorService: ColorService) {}\r\n\r\n  ngOnInit() {\r\n    this.colorService.getAllColors().subscribe({\r\n      next: (data) => {\r\n        this.colors = data; // Store the colors received from the service\r\n      },\r\n      error: (error) => {\r\n        console.error('Failed to fetch colors:', error); // Handle any errors here\r\n      },\r\n    });\r\n  }\r\n\r\n  onColorClick(colorId: number) {\r\n    if (this.selectedColorId === colorId) {\r\n      this.selectedColorId = null; // Deselect if the same color is clicked\r\n      this.colorSelected.emit(null);\r\n    } else {\r\n      this.selectedColorId = colorId; // Select a new color\r\n      this.colorSelected.emit(colorId);\r\n    }\r\n  }\r\n\r\n  getRows(): GetColorsResponse[][] {\r\n    const rows: GetColorsResponse[][] = [];\r\n    for (let i = 0; i < this.colors.length; i += 3) {\r\n      rows.push(this.colors.slice(i, i + 3));\r\n    }\r\n    return rows;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../assets/styles/main.scss';\r\n\r\n.colors-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n  background: $neutral-lighter;\r\n  width: min-content;\r\n  padding: 8px;\r\n  border-radius: 8px;\r\n}\r\n\r\n.color-row {\r\n  display: flex;\r\n  gap: 8px;\r\n}\r\n\r\n.color-box {\r\n  width: 80px;\r\n  height: 80px;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  transition: border 0.2s ease;\r\n  border: 2px solid transparent;\r\n\r\n  &.selected {\r\n    border: 3px solid $background;\r\n  }\r\n}\r\n",
                    "styleUrl": "./color-selection-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "colorService",
                        "type": "ColorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"colors-container\">\r\n  <div class=\"color-row\" *ngFor=\"let row of getRows()\">\r\n    <div\r\n      *ngFor=\"let color of row\"\r\n      class=\"color-box\"\r\n      [style.background-color]=\"color.hexCode\"\r\n      [class.selected]=\"color.id === selectedColorId\"\r\n      (click)=\"onColorClick(color.id)\"\r\n    ></div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ColorSelectionSubmenuComponent",
            "id": "component-ColorSelectionSubmenuComponent-7706989b10ab9949932d62ed685da9facb1ba96ae051303b7d70fca37f98e828e84685455046ac332aa7adc72f4ba448224f0e750a5daadb9e58e17dd9177ef5",
            "file": "src/app/shared/components/color-selection-submenu/color-selection-submenu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-color-selection-submenu",
            "styleUrls": [
                "./color-selection-submenu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./color-selection-submenu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "buttonText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "colorId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "number | null",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                },
                {
                    "name": "menuAction",
                    "defaultValue": "new EventEmitter<ColorSelectionSubmenuOutput>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "selectedColorId",
                    "defaultValue": "this.colorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onActionClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCloseClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onColorSelected",
                    "args": [
                        {
                            "name": "colorId",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "colorId",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ColorSelectionPanelComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core'\r\nimport { ColorSelectionPanelComponent } from '../color-selection-panel/color-selection-panel.component'\r\nimport { CommonModule } from '@angular/common'\r\nimport { ColorSelectionSubmenuInput, ColorSelectionSubmenuOutput } from '../../models/submenuInputOutput.model'\r\n\r\n@Component({\r\n  selector: 'app-color-selection-submenu',\r\n  templateUrl: './color-selection-submenu.component.html',\r\n  styleUrls: ['./color-selection-submenu.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule, ColorSelectionPanelComponent],\r\n})\r\nexport class ColorSelectionSubmenuComponent implements OnInit, ColorSelectionSubmenuInput {\r\n  // Inputs matching ColorSelectionSubmenuInput\r\n  @Input() title: string = ''\r\n  @Input() colorId: number | null = null\r\n  @Input() buttonText: string = ''\r\n\r\n  // Outputs for ColorSelectionSubmenuOutput\r\n  @Output() menuAction = new EventEmitter<ColorSelectionSubmenuOutput>()\r\n  @Output() close = new EventEmitter<void>()\r\n\r\n  // Component State\r\n  selectedColorId: number | null = this.colorId\r\n\r\n  ngOnInit() {\r\n    // Initialize selectedColorId\r\n    this.selectedColorId = this.colorId\r\n  }\r\n\r\n  // Handle color selection from the child component\r\n  onColorSelected(colorId: number | null) {\r\n    this.selectedColorId = colorId\r\n  }\r\n\r\n  // Handle action button click\r\n  onActionClicked() {\r\n    // Emit the menu action\r\n    this.menuAction.emit({\r\n      colorId: this.selectedColorId,\r\n    })\r\n    this.close.emit()\r\n  }\r\n\r\n  // Handle close button click\r\n  onCloseClicked() {\r\n    this.close.emit()\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../assets/styles/main.scss';\r\n\r\n.submenu-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 16px;\r\n  background-color: $neutral-lighter;\r\n  border-radius: 8px;\r\n  width: 300px;\r\n}\r\n\r\n.submenu-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  h2 {\r\n    margin: 0;\r\n  }\r\n\r\n  .close-button {\r\n    background: none;\r\n    border: none;\r\n    font-size: 24px;\r\n    cursor: pointer;\r\n  }\r\n}\r\n\r\n.action-button-group {\r\n  margin-top: 16px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n\r\n  button {\r\n    padding: 8px 16px;\r\n    background-color: $primary;\r\n    color: white;\r\n    border: none;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n  }\r\n}\r\n",
                    "styleUrl": "./color-selection-submenu.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "ColorSelectionSubmenuInput"
            ],
            "templateData": "<div class=\"submenu-container\">\r\n  <!-- Header with title and close button -->\r\n  <div class=\"submenu-header\">\r\n    <h2>{{ title }}</h2>\r\n    <button class=\"close-button\" (click)=\"onCloseClicked()\">×</button>\r\n  </div>\r\n\r\n  <!-- Color selection panel -->\r\n  <app-color-selection-panel\r\n    [selectedColorId]=\"colorId\"\r\n    (colorSelected)=\"onColorSelected($event)\"\r\n  ></app-color-selection-panel>\r\n\r\n  <!-- Action button -->\r\n  <div class=\"action-button-group\">\r\n    <button (click)=\"onActionClicked()\">\r\n      {{ buttonText }}\r\n    </button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ConfirmationSubmenuComponent",
            "id": "component-ConfirmationSubmenuComponent-59f36134ff6eb848db041bdce47bcad8377c4d54861635c9d91e5faaf103ec884cce2ad355e7e7602ebbcde6ed8e3c5ed489e650563df5aae061ad2ea12de096",
            "file": "src/app/shared/components/confirmation-submenu/confirmation-submenu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-confirmation-submenu",
            "styleUrls": [
                "./confirmation-submenu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./confirmation-submenu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "buttonText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "confirmationMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                },
                {
                    "name": "menuAction",
                    "defaultValue": "new EventEmitter<ConfirmationSubmenuOutput>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onActionClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCloseClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { ConfirmationSubmenuInput, ConfirmationSubmenuOutput } from '../../models/submenuInputOutput.model'\r\n\r\n@Component({\r\n  selector: 'app-confirmation-submenu',\r\n  templateUrl: './confirmation-submenu.component.html',\r\n  styleUrls: ['./confirmation-submenu.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n})\r\nexport class ConfirmationSubmenuComponent implements ConfirmationSubmenuInput {\r\n  // Inputs matching ConfirmationSubmenuInput\r\n  @Input() title: string = ''\r\n  @Input() confirmationMessage: string = ''\r\n  @Input() buttonText: string = ''\r\n\r\n  // Outputs for ConfirmationSubmenuOutput\r\n  @Output() menuAction = new EventEmitter<ConfirmationSubmenuOutput>()\r\n  @Output() close = new EventEmitter<void>()\r\n\r\n  // Handle action button click\r\n  onActionClicked() {\r\n    // Emit the menu action with the specified structure\r\n    this.menuAction.emit({\r\n      confirmationStatus: true,\r\n    })\r\n    this.close.emit()\r\n  }\r\n\r\n  // Handle close button click\r\n  onCloseClicked() {\r\n    this.close.emit()\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../assets/styles/main.scss';\r\n\r\n.submenu-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 16px;\r\n  background-color: $neutral-lighter;\r\n  border-radius: 8px;\r\n  width: 300px;\r\n}\r\n\r\n.submenu-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  h2 {\r\n    margin: 0;\r\n  }\r\n\r\n  .close-button {\r\n    background: none;\r\n    border: none;\r\n    font-size: 24px;\r\n    cursor: pointer;\r\n  }\r\n}\r\n\r\n.confirmation-message {\r\n  margin-top: 16px;\r\n\r\n  p {\r\n    margin: 0;\r\n    font-size: 16px;\r\n  }\r\n}\r\n\r\n.action-button-group {\r\n  margin-top: 16px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n\r\n  button {\r\n    padding: 8px 16px;\r\n    background-color: $primary;\r\n    color: $secondary;\r\n    border: none;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n  }\r\n}\r\n",
                    "styleUrl": "./confirmation-submenu.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "ConfirmationSubmenuInput"
            ],
            "templateData": "<div class=\"submenu-container\">\r\n  <!-- Header with title and close button -->\r\n  <div class=\"submenu-header\">\r\n    <h2>{{ title }}</h2>\r\n    <button class=\"close-button\" (click)=\"onCloseClicked()\">×</button>\r\n  </div>\r\n\r\n  <!-- Confirmation message -->\r\n  <div class=\"confirmation-message\">\r\n    <p>{{ confirmationMessage }}</p>\r\n  </div>\r\n\r\n  <!-- Action button -->\r\n  <div class=\"action-button-group\">\r\n    <button (click)=\"onActionClicked()\">\r\n      {{ buttonText }}\r\n    </button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "CreateBoardItemSubmenuComponent",
            "id": "component-CreateBoardItemSubmenuComponent-9fc5e9036dd1173170938d7f490ba5773c77f939c5aa85dc6d1d921675739010b37a1b6c117f176957c711a83e6cab6827159a02d86aa61547505d81257d535c",
            "file": "src/app/shared/components/create-board-item-submenu/create-board-item-submenu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-board-item-submenu",
            "styleUrls": [
                "./create-board-item-submenu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./create-board-item-submenu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "buttonText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholderText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                },
                {
                    "name": "menuAction",
                    "defaultValue": "new EventEmitter<CreateBoardItemSubmenuOutput>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "textInputValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "onActionClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCloseClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core'\r\nimport { FormsModule } from '@angular/forms'\r\nimport { CommonModule } from '@angular/common'\r\nimport {\r\n  CreateBoardItemSubmenuInput,\r\n  CreateBoardItemSubmenuOutput,\r\n} from '../../models/submenuInputOutput.model'\r\n\r\n@Component({\r\n  selector: 'app-create-board-item-submenu',\r\n  templateUrl: './create-board-item-submenu.component.html',\r\n  styleUrls: ['./create-board-item-submenu.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n})\r\nexport class CreateBoardItemSubmenuComponent implements CreateBoardItemSubmenuInput {\r\n  // Inputs based on CreateBoardItemSubmenuInput\r\n  @Input() title: string = ''\r\n  @Input() placeholderText?: string = '' // Optional placeholder\r\n  @Input() buttonText: string = ''\r\n\r\n  // Outputs\r\n  @Output() menuAction = new EventEmitter<CreateBoardItemSubmenuOutput>()\r\n  @Output() close = new EventEmitter<void>()\r\n\r\n  // Component State\r\n  textInputValue: string = ''\r\n\r\n  // Handle action button click\r\n  onActionClicked() {\r\n    // Emit the menu action with the specified structure\r\n    this.menuAction.emit({ text: this.textInputValue })\r\n    // Close the submenu\r\n    this.close.emit()\r\n  }\r\n\r\n  // Handle close button click\r\n  onCloseClicked() {\r\n    this.close.emit()\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../assets/styles/main.scss';\r\n\r\n.submenu-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 16px;\r\n  background-color: $neutral-lighter;\r\n  border-radius: 8px;\r\n  width: 300px;\r\n}\r\n\r\n.submenu-header {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  h2 {\r\n    margin: 0;\r\n  }\r\n}\r\n\r\n.input-group {\r\n  margin-top: 16px;\r\n\r\n  input[type='text'] {\r\n    width: 100%;\r\n    padding: 8px;\r\n    border: 1px solid $neutral-darker;\r\n    border-radius: 4px;\r\n  }\r\n}\r\n\r\n.action-button-group {\r\n  margin-top: 16px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  button {\r\n    padding: 8px 16px;\r\n    border: none;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    background-color: $primary;\r\n\r\n    &.close-button {\r\n      background: none;\r\n      color: $neutral-darker;\r\n      font-size: 24px;\r\n    }\r\n  }\r\n\r\n  .close-button {\r\n    background: none;\r\n    border: none;\r\n    cursor: pointer;\r\n    font-size: 24px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./create-board-item-submenu.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "CreateBoardItemSubmenuInput"
            ],
            "templateData": "<div class=\"submenu-container\">\r\n  <!-- Header with title -->\r\n  <div class=\"submenu-header\">\r\n    <h2>{{ title }}</h2>\r\n  </div>\r\n\r\n  <!-- Text input section -->\r\n  <div class=\"input-group\">\r\n    <input\r\n      id=\"textInput\"\r\n      type=\"text\"\r\n      [(ngModel)]=\"textInputValue\"\r\n      [placeholder]=\"placeholderText\"\r\n    />\r\n  </div>\r\n\r\n  <!-- Action button and close button on the same row -->\r\n  <div class=\"action-button-group\">\r\n    <button (click)=\"onActionClicked()\">{{ buttonText }}</button>\r\n    <button class=\"close-button\" (click)=\"onCloseClicked()\">×</button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-20ed393569e289e8770fc6788397c7de97b92e64f3edd13029603ab59ef00662df55026f299bbfe3b80760db74ff6440d8ba62f51e2153a63bb545680590392a",
            "file": "src/app/features/dashboard-page/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [
                "./dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonText",
                    "defaultValue": "'Create'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "colorSelectionHeader",
                    "defaultValue": "'Background'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "defaultColorId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "showSubmenu",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "submenuTitle",
                    "defaultValue": "'Generate Board'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "textInputLabel",
                    "defaultValue": "'Name'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "handleMenuAction",
                    "args": [
                        {
                            "name": "event",
                            "type": "GenerateBoardSubmenuOutput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "GenerateBoardSubmenuOutput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openSubmenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "GenerateBoardSubmenuComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport { CreateBoardRequest } from '../../../shared/models/board.model'\r\nimport { CommonModule } from '@angular/common'\r\nimport { GenerateBoardSubmenuComponent } from '../../../shared/components/generate-board-submenu/generate-board-submenu.component'\r\nimport { BoardService } from '../../../core/services/board.service'\r\nimport { GenerateBoardSubmenuOutput } from '../../../shared/models/submenuInputOutput.model'\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule, GenerateBoardSubmenuComponent],\r\n})\r\nexport class DashboardComponent {\r\n  // Variables for the submenu\r\n  submenuTitle = 'Generate Board'\r\n  textInputLabel = 'Name'\r\n  colorSelectionHeader = 'Background'\r\n  buttonText = 'Create'\r\n  defaultColorId: number | null = null\r\n\r\n  // Control submenu visibility\r\n  showSubmenu: boolean = false\r\n\r\n  constructor(private boardService: BoardService) {}\r\n\r\n  // Method to handle button click to open submenu\r\n  openSubmenu() {\r\n    this.showSubmenu = true\r\n  }\r\n\r\n  // Method to handle the menu action emitted by the submenu\r\n  handleMenuAction(event: GenerateBoardSubmenuOutput) {\r\n    const { name, colorId } = event\r\n    // Generate a random ID for the new board\r\n    const newBoardId = uuidv4()\r\n\r\n    // Create the request object\r\n    const request: CreateBoardRequest = {\r\n      id: newBoardId,\r\n      name: name,\r\n      colorId: colorId,\r\n    }\r\n\r\n    // Call the service to create the board\r\n    this.boardService.createBoard(request).subscribe({\r\n      next: () => {\r\n        console.log('Board created successfully')\r\n        // Optionally, refresh the list of boards or perform other actions\r\n      },\r\n      error: (error) => {\r\n        console.error('Error creating board:', error)\r\n        // Handle error (e.g., display a message to the user)\r\n      },\r\n    })\r\n\r\n    // Close the submenu after the action is handled\r\n    this.showSubmenu = false\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".dashboard {\r\n  position: relative; /* To position the submenu absolutely within this container */\r\n\r\n  .open-submenu-button {\r\n    /* Style the button as desired */\r\n    margin: 16px;\r\n  }\r\n\r\n  app-generate-board-submenu {\r\n    position: absolute;\r\n    top: 50px; /* Adjust as needed to position below the button */\r\n    left: 16px; /* Adjust to position next to the button */\r\n    z-index: 1000; /* Ensure it appears above other elements */\r\n  }\r\n}\r\n",
                    "styleUrl": "./dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "boardService",
                        "type": "BoardService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "boardService",
                        "type": "BoardService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"dashboard\">\r\n  <!-- Button to open the submenu -->\r\n  <button class=\"open-submenu-button\" (click)=\"openSubmenu()\">Create Board</button>\r\n\r\n  <!-- Submenu component -->\r\n  <app-generate-board-submenu\r\n    *ngIf=\"showSubmenu\"\r\n    [title]=\"submenuTitle\"\r\n    [textInputLabel]=\"textInputLabel\"\r\n    [colorSelectionHeader]=\"colorSelectionHeader\"\r\n    [buttonText]=\"buttonText\"\r\n    [colorId]=\"defaultColorId\"\r\n    (menuAction)=\"handleMenuAction($event)\"\r\n    (close)=\"showSubmenu = false\"\r\n  ></app-generate-board-submenu>\r\n</div>\r\n"
        },
        {
            "name": "DropdownSubmenuComponent",
            "id": "component-DropdownSubmenuComponent-bcdcf34f3c147bd651fbaa6ba330ddb256e7115f825feee392975f0a489a23341fe1997c70d7fd4dbc4ac806f9c7c2b02a293734b3e8c4f0249a80e4816dc61e",
            "file": "src/app/shared/components/dropdown-submenu/dropdown-submenu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dropdown-submenu",
            "styleUrls": [
                "./dropdown-submenu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dropdown-submenu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "buttonText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "dropdownInputLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "dropdownItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "Array<literal type>",
                    "decorators": []
                },
                {
                    "name": "dropdownPlaceholderText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter"
                },
                {
                    "name": "menuAction",
                    "defaultValue": "new EventEmitter<DropdownSubmenuOutput>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "selectedOption",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "onActionClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCloseClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { FormsModule } from '@angular/forms'\r\nimport {\r\n  DropdownSubmenuInput,\r\n  DropdownSubmenuOutput,\r\n} from '../../models/submenuInputOutput.model'\r\n\r\n@Component({\r\n  selector: 'app-dropdown-submenu',\r\n  templateUrl: './dropdown-submenu.component.html',\r\n  styleUrls: ['./dropdown-submenu.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n})\r\nexport class DropdownSubmenuComponent implements DropdownSubmenuInput {\r\n  // Inputs matching DropdownSubmenuInput\r\n  @Input() title: string = ''\r\n  @Input() dropdownInputLabel: string = '' // Corrected name to match model\r\n  @Input() dropdownItems: Array<{ id: string; name: string }> = []\r\n  @Input() dropdownPlaceholderText: string = ''\r\n  @Input() buttonText: string = ''\r\n\r\n  // Outputs for DropdownSubmenuOutput\r\n  @Output() menuAction = new EventEmitter<DropdownSubmenuOutput>()\r\n  @Output() close = new EventEmitter<void>()\r\n\r\n  // Component State\r\n  selectedOption: { id: string; name: string } | null = null\r\n\r\n  // Handle action button click\r\n  onActionClicked() {\r\n    if (this.selectedOption) {\r\n      // Emit the menu action with the specified structure\r\n      this.menuAction.emit(this.selectedOption)\r\n    }\r\n    // Close the submenu\r\n    this.close.emit()\r\n  }\r\n\r\n  // Handle close button click\r\n  onCloseClicked() {\r\n    this.close.emit()\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../assets/styles/main.scss';\r\n\r\n.submenu-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 16px;\r\n  background-color: $neutral-lighter;\r\n  border-radius: 8px;\r\n  width: 300px;\r\n}\r\n\r\n.submenu-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  h2 {\r\n    margin: 0;\r\n  }\r\n\r\n  .close-button {\r\n    background: none;\r\n    border: none;\r\n    font-size: 24px;\r\n    cursor: pointer;\r\n  }\r\n}\r\n\r\n.input-group {\r\n  margin-top: 16px;\r\n\r\n  label {\r\n    display: block;\r\n    margin-bottom: 8px;\r\n    font-weight: bold;\r\n  }\r\n\r\n  select {\r\n    width: 100%;\r\n    padding: 8px;\r\n    border: 1px solid $neutral-darker;\r\n    border-radius: 4px;\r\n    background-color: white;\r\n    appearance: none;\r\n    background-image: url('data:image/svg+xml;charset=US-ASCII,<svg%20xmlns=\"http://www.w3.org/2000/svg\"%20viewBox=\"0%200%204%205\"><path%20fill=\"%23aaa\"%20d=\"M2%200L0%202h4L2%200z%20M2%205L0%203h4l-2%202z\"/></svg>');\r\n    background-repeat: no-repeat;\r\n    background-position: right 8px center;\r\n    background-size: 8px 10px;\r\n  }\r\n}\r\n\r\n.action-button-group {\r\n  margin-top: 16px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n\r\n  button {\r\n    padding: 8px 16px;\r\n    background-color: $primary;\r\n    color: white;\r\n    border: none;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n\r\n    &:disabled {\r\n      background-color: $primary-darker;\r\n      cursor: not-allowed;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./dropdown-submenu.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "DropdownSubmenuInput"
            ],
            "templateData": "<div class=\"submenu-container\">\r\n  <!-- Header with title and close button -->\r\n  <div class=\"submenu-header\">\r\n    <h2>{{ title }}</h2>\r\n    <button class=\"close-button\" (click)=\"onCloseClicked()\">×</button>\r\n  </div>\r\n\r\n  <!-- Dropdown input section -->\r\n  <div class=\"input-group\">\r\n    <label for=\"dropdownSelect\">{{ dropdownInputLabel }}</label>\r\n    <select\r\n      id=\"dropdownSelect\"\r\n      [(ngModel)]=\"selectedOption\"\r\n      [ngModelOptions]=\"{ standalone: true }\"\r\n    >\r\n      <option value=\"\" disabled selected hidden>{{ dropdownPlaceholderText }}</option>\r\n      <option\r\n        *ngFor=\"let option of dropdownItems\"\r\n        [ngValue]=\"option\"\r\n      >\r\n        {{ option.name }}\r\n      </option>\r\n    </select>\r\n  </div>\r\n\r\n  <!-- Action button -->\r\n  <div class=\"action-button-group\">\r\n    <button\r\n      [disabled]=\"!selectedOption\"\r\n      (click)=\"onActionClicked()\"\r\n    >\r\n      {{ buttonText }}\r\n    </button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "GenerateBoardSubmenuComponent",
            "id": "component-GenerateBoardSubmenuComponent-40ce1ce08bdb83779685f0393195153577d8be528858ddf7edec080af8e3903f19e60c501bd1643fb9bca9d92cac28251b5ab1ed72d71b715f3547f1b1f127c5",
            "file": "src/app/shared/components/generate-board-submenu/generate-board-submenu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-generate-board-submenu",
            "styleUrls": [
                "./generate-board-submenu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./generate-board-submenu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "buttonText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "colorId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "number | null",
                    "decorators": []
                },
                {
                    "name": "colorSelectionHeader",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "initialText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "'Enter name'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "textInputLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter"
                },
                {
                    "name": "menuAction",
                    "defaultValue": "new EventEmitter<GenerateBoardSubmenuOutput>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "nameInput",
                    "defaultValue": "this.initialText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "selectedColorId",
                    "defaultValue": "this.colorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "onColorSelected",
                    "args": [
                        {
                            "name": "colorId",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "colorId",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCreateClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onQuitClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "BackgroundSelectionPanelComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { BackgroundSelectionPanelComponent } from '../background-selection-panel/background-selection-panel.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  GenerateBoardSubmenuInput,\r\n  GenerateBoardSubmenuOutput,\r\n} from '../../models/submenuInputOutput.model';\r\n\r\n@Component({\r\n  selector: 'app-generate-board-submenu',\r\n  templateUrl: './generate-board-submenu.component.html',\r\n  styleUrls: ['./generate-board-submenu.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule, BackgroundSelectionPanelComponent],\r\n})\r\nexport class GenerateBoardSubmenuComponent\r\n  implements GenerateBoardSubmenuInput\r\n{\r\n  // Inputs\r\n  @Input() title: string = '';\r\n  @Input() textInputLabel: string = '';\r\n  @Input() colorSelectionHeader: string = '';\r\n  @Input() buttonText: string = '';\r\n  @Input() colorId: number | null = null;\r\n  @Input() initialText: string = ''; // Optional initial text for prefill\r\n  @Input() placeholder: string = 'Enter name'; // Placeholder with default text\r\n\r\n  // Outputs\r\n  @Output() menuAction = new EventEmitter<GenerateBoardSubmenuOutput>();\r\n  @Output() close = new EventEmitter<void>();\r\n\r\n  // Component State\r\n  nameInput: string = this.initialText;\r\n  selectedColorId: number | null = this.colorId;\r\n\r\n  // Handle color selection from the child component\r\n  onColorSelected(colorId: number | null) {\r\n    this.selectedColorId = colorId;\r\n  }\r\n\r\n  // Handle create button click\r\n  onCreateClicked() {\r\n    // Emit the menu action with the specified structure\r\n    this.menuAction.emit({\r\n      name: this.nameInput,\r\n      colorId: this.selectedColorId,\r\n    });\r\n    this.close.emit();\r\n  }\r\n\r\n  // Handle quit button click\r\n  onQuitClicked() {\r\n    this.close.emit();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../assets/styles/main.scss';\r\n\r\n.submenu-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 16px;\r\n  background-color: $neutral-lighter;\r\n  border-radius: 8px;\r\n  width: 300px;\r\n}\r\n\r\n.submenu-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  h2 {\r\n    margin: 0;\r\n  }\r\n\r\n  .quit-button {\r\n    background: none;\r\n    border: none;\r\n    font-size: 24px;\r\n    cursor: pointer;\r\n  }\r\n}\r\n\r\n.input-group,\r\n.color-selection-group,\r\n.action-button-group {\r\n  margin-top: 16px;\r\n\r\n  label {\r\n    display: block;\r\n    margin-bottom: 8px;\r\n    font-weight: bold;\r\n  }\r\n\r\n  input[type='text'] {\r\n    width: 100%;\r\n    padding: 8px;\r\n    border-radius: 4px;\r\n  }\r\n}\r\n\r\n.action-button-group {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n\r\n  button {\r\n    padding: 8px 16px;\r\n    background-color: $primary;\r\n    color: black;\r\n    border: none;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n\r\n    &:disabled {\r\n      background-color: $primary-darker;\r\n      cursor: not-allowed;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./generate-board-submenu.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "GenerateBoardSubmenuInput"
            ],
            "templateData": "<div class=\"submenu-container\">\r\n  <!-- Header with title and quit button -->\r\n  <div class=\"submenu-header\">\r\n    <h2>{{ title }}</h2>\r\n    <button class=\"quit-button\" (click)=\"onQuitClicked()\">x</button>\r\n  </div>\r\n\r\n  <!-- Text input section -->\r\n  <div class=\"input-group\">\r\n    <label for=\"nameInput\">{{ textInputLabel }}</label>\r\n    <input\r\n      id=\"nameInput\"\r\n      type=\"text\"\r\n      [(ngModel)]=\"nameInput\"\r\n      [placeholder]=\"placeholder\"\r\n    />\r\n  </div>\r\n\r\n  <!-- Color selection section -->\r\n  <div class=\"color-selection-group\">\r\n    <label>{{ colorSelectionHeader }}</label>\r\n    <app-background-selection-panel\r\n      [selectedColorId]=\"selectedColorId\"\r\n      (colorSelected)=\"onColorSelected($event)\"\r\n    ></app-background-selection-panel>\r\n  </div>\r\n\r\n  <!-- Action button -->\r\n  <div class=\"action-button-group\">\r\n    <button\r\n      [disabled]=\"nameInput.trim().length === 0\"\r\n      (click)=\"onCreateClicked()\"\r\n    >\r\n      {{ buttonText }}\r\n    </button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "GuestDataDialogComponent",
            "id": "component-GuestDataDialogComponent-19b6f2287be990149b8829433c898068d475b577995331450b82a90209845431866b1f8185c5ec8f5ee3966979f97d78c10e825a891b53abcf2dbf6f124e269d",
            "file": "src/app/shared/components/guest-data-dialog/guest-data-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-guest-data-dialog",
            "styleUrls": [
                "./guest-data-dialog.component.scss"
            ],
            "styles": [],
            "template": "<h1 mat-dialog-title>Transfer Guest Data</h1>\n<div mat-dialog-content>\n  <p>Do you want to transfer your guest data to your new account?</p>\n</div>\n<div mat-dialog-actions>\n  <button mat-button (click)=\"onNoClick()\">No</button>\n  <button mat-button color=\"primary\" (click)=\"onYesClick()\">Yes</button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<GuestDataDialogComponent>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onYesClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule, MatDialogRef } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-guest-data-dialog',\r\n  standalone: true,\r\n  imports: [MatDialogModule, MatButtonModule],\r\n  styleUrls: ['./guest-data-dialog.component.scss'],\r\n  template: `\r\n    <h1 mat-dialog-title>Transfer Guest Data</h1>\r\n    <div mat-dialog-content>\r\n      <p>Do you want to transfer your guest data to your new account?</p>\r\n    </div>\r\n    <div mat-dialog-actions>\r\n      <button mat-button (click)=\"onNoClick()\">No</button>\r\n      <button mat-button color=\"primary\" (click)=\"onYesClick()\">Yes</button>\r\n    </div>\r\n  `,\r\n})\r\nexport class GuestDataDialogComponent {\r\n  constructor(public dialogRef: MatDialogRef<GuestDataDialogComponent>) {}\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close(false);\r\n  }\r\n\r\n  onYesClick(): void {\r\n    this.dialogRef.close(true);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./guest-data-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<GuestDataDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<GuestDataDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": []
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-48b9abe37706bc42f20cfa97ed9f943678344ea7d254c0c82183c657750c2191b43486fe730c778627b2ea6aa0e2f33a7abcf3ce08b68ad18b062ad99ea97acb",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-4978ab444626f21f39437c4d98c9d2f746e5b815ac8a749226beac36eb4016221cda87299341411a262e2a61da061e0542dad85be5c4958d8e06c9be68c0a32e",
            "file": "src/app/shared/components/menu/menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-menu",
            "styleUrls": [
                "./menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "menuConfig",
                    "defaultValue": "{ submenus: [] }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "MenuConfig",
                    "decorators": []
                },
                {
                    "name": "orderBias",
                    "defaultValue": "['confirmation-submenu']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "SubmenuTypes[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "menuAction",
                    "defaultValue": "new EventEmitter<SubmenuTransfer>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "activeSubmenuIndex",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "rearrangedSubmenus",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "showSubmenu",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [
                {
                    "name": "closeSubmenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getBackgroundSelectionSubmenuPayload",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "BackgroundSelectionSubmenuInput",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getColorSelectionSubmenuPayload",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ColorSelectionSubmenuInput",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getConfirmationSubmenuPayload",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ConfirmationSubmenuInput",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDropdownSubmenuPayload",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DropdownSubmenuInput",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGenerateBoardSubmenuPayload",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "GenerateBoardSubmenuInput",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTextInputSubmenuPayload",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TextInputSubmenuInput",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSubmenuAction",
                    "args": [
                        {
                            "name": "submenuOutput",
                            "type": "SubmenuOutput",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "submenuOutput",
                            "type": "SubmenuOutput",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openSubmenu",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rearrangeSubmenus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TextInputSubmenuComponent",
                    "type": "component"
                },
                {
                    "name": "ConfirmationSubmenuComponent",
                    "type": "component"
                },
                {
                    "name": "BackgroundSelectionSubmenuComponent",
                    "type": "component"
                },
                {
                    "name": "GenerateBoardSubmenuComponent",
                    "type": "component"
                },
                {
                    "name": "ColorSelectionSubmenuComponent",
                    "type": "component"
                },
                {
                    "name": "DropdownSubmenuComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  MenuConfig,\r\n  SubmenuTransfer,\r\n} from '../../models/menu.model';\r\nimport { SubmenuTypes } from '../../models/submenuInputOutput.model';\r\nimport {\r\n  SubmenuInput,\r\n  SubmenuOutput,\r\n  TextInputSubmenuInput,\r\n  ConfirmationSubmenuInput,\r\n  BackgroundSelectionSubmenuInput,\r\n  GenerateBoardSubmenuInput,\r\n  ColorSelectionSubmenuInput,\r\n  DropdownSubmenuInput,\r\n} from '../../models/submenuInputOutput.model';\r\nimport { TextInputSubmenuComponent } from '../text-input-submenu/text-input-submenu.component';\r\nimport { ConfirmationSubmenuComponent } from '../confirmation-submenu/confirmation-submenu.component';\r\nimport { BackgroundSelectionSubmenuComponent } from '../background-selection-submenu/background-selection-submenu.component';\r\nimport { GenerateBoardSubmenuComponent } from '../generate-board-submenu/generate-board-submenu.component';\r\nimport { ColorSelectionSubmenuComponent } from '../color-selection-submenu/color-selection-submenu.component';\r\nimport { DropdownSubmenuComponent } from '../dropdown-submenu/dropdown-submenu.component';\r\n\r\n@Component({\r\n  selector: 'app-menu',\r\n  templateUrl: './menu.component.html',\r\n  styleUrls: ['./menu.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    TextInputSubmenuComponent,\r\n    ConfirmationSubmenuComponent,\r\n    BackgroundSelectionSubmenuComponent,\r\n    GenerateBoardSubmenuComponent,\r\n    ColorSelectionSubmenuComponent,\r\n    DropdownSubmenuComponent,\r\n  ],\r\n})\r\nexport class MenuComponent {\r\n  @Input() menuConfig: MenuConfig = { submenus: [] };\r\n  @Input() orderBias: SubmenuTypes[] = ['confirmation-submenu']; // Default order bias\r\n  @Output() menuAction = new EventEmitter<SubmenuTransfer>();\r\n\r\n  // Control submenu visibility and active submenu index\r\n  showSubmenu: boolean = false;\r\n  activeSubmenuIndex: number | null = null;\r\n\r\n  // Store rearranged submenus based on order bias\r\n  rearrangedSubmenus: { buttonText: string; submenu: SubmenuTransfer }[] = [];\r\n\r\n  ngOnInit() {\r\n    this.rearrangeSubmenus();\r\n  }\r\n\r\n  rearrangeSubmenus() {\r\n    const submenus = this.menuConfig.submenus;\r\n\r\n    const submenusNotInBias: { buttonText: string; submenu: SubmenuTransfer }[] = [];\r\n    const submenusInBias: { [type: string]: { buttonText: string; submenu: SubmenuTransfer }[] } = {};\r\n\r\n    // Initialize submenusInBias for each type in orderBias\r\n    for (const type of this.orderBias) {\r\n      submenusInBias[type] = [];\r\n    }\r\n\r\n    // Separate submenus into biased and non-biased\r\n    for (const submenuItem of submenus) {\r\n      const type = submenuItem.submenu.type;\r\n      if (this.orderBias.includes(type)) {\r\n        submenusInBias[type].push(submenuItem);\r\n      } else {\r\n        submenusNotInBias.push(submenuItem);\r\n      }\r\n    }\r\n\r\n    this.rearrangedSubmenus = [...submenusNotInBias];\r\n\r\n    // Append submenus in bias at the end, in the order specified by orderBias\r\n    for (const type of this.orderBias) {\r\n      this.rearrangedSubmenus.push(...submenusInBias[type]);\r\n    }\r\n  }\r\n\r\n  openSubmenu(index: number) {\r\n    this.activeSubmenuIndex = index;\r\n    this.showSubmenu = true;\r\n  }\r\n\r\n  handleSubmenuAction(submenuOutput: SubmenuOutput) {\r\n    if (this.activeSubmenuIndex !== null) {\r\n      const submenuItem = this.rearrangedSubmenus[this.activeSubmenuIndex];\r\n      const submenuTransfer: SubmenuTransfer = {\r\n        type: submenuItem.submenu.type,\r\n        purpose: submenuItem.submenu.purpose,\r\n        payload: submenuOutput,\r\n      };\r\n      this.menuAction.emit(submenuTransfer);\r\n      this.closeSubmenu();\r\n    }\r\n  }\r\n\r\n  closeSubmenu() {\r\n    this.showSubmenu = false;\r\n    this.activeSubmenuIndex = null;\r\n  }\r\n\r\n  // Helper methods to get payloads as the correct type, with fallbacks for optional values\r\n  getTextInputSubmenuPayload(index: number): TextInputSubmenuInput {\r\n    return this.rearrangedSubmenus[index].submenu.payload as TextInputSubmenuInput;\r\n  }\r\n\r\n  getConfirmationSubmenuPayload(index: number): ConfirmationSubmenuInput {\r\n    return this.rearrangedSubmenus[index].submenu.payload as ConfirmationSubmenuInput;\r\n  }\r\n\r\n  getBackgroundSelectionSubmenuPayload(index: number): BackgroundSelectionSubmenuInput {\r\n    return this.rearrangedSubmenus[index].submenu.payload as BackgroundSelectionSubmenuInput;\r\n  }\r\n\r\n  getColorSelectionSubmenuPayload(index: number): ColorSelectionSubmenuInput {\r\n    return this.rearrangedSubmenus[index].submenu.payload as ColorSelectionSubmenuInput;\r\n  }\r\n\r\n  getDropdownSubmenuPayload(index: number): DropdownSubmenuInput {\r\n    return this.rearrangedSubmenus[index].submenu.payload as DropdownSubmenuInput;\r\n  }\r\n\r\n  getGenerateBoardSubmenuPayload(index: number): GenerateBoardSubmenuInput {\r\n    return this.rearrangedSubmenus[index].submenu.payload as GenerateBoardSubmenuInput;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../assets/styles/main.scss';\r\n\r\n.menu-container {\r\n  position: relative;\r\n  background-color: $neutral-lighter;\r\n}\r\n\r\n.menu-buttons {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.menu-button-container {\r\n  position: relative;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.menu-button {\r\n  padding: 8px 16px;\r\n  background-color: $primary;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  width: 100%;\r\n  text-align: left;\r\n\r\n  &.confirmation-button {\r\n    background-color: $error;\r\n    color: white;\r\n  }\r\n}\r\n\r\n.submenu-container {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 100%; // Position to the right of the button\r\n  z-index: 1000;\r\n  margin-left: 8px;\r\n}\r\n",
                    "styleUrl": "./menu.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"menu-container\">\r\n  <div class=\"menu-buttons\">\r\n    <div\r\n      class=\"menu-button-container\"\r\n      *ngFor=\"let submenuItem of rearrangedSubmenus; let index = index\"\r\n    >\r\n      <!-- Menu Button -->\r\n      <button\r\n        class=\"menu-button\"\r\n        [ngClass]=\"{\r\n          'confirmation-button': submenuItem.submenu.type === 'confirmation-submenu'\r\n        }\"\r\n        (click)=\"openSubmenu(index)\"\r\n      >\r\n        {{ submenuItem.buttonText }}\r\n      </button>\r\n\r\n      <!-- Submenu -->\r\n      <ng-container *ngIf=\"showSubmenu && activeSubmenuIndex === index\">\r\n        <div class=\"submenu-container\">\r\n          <ng-container [ngSwitch]=\"submenuItem.submenu.type\">\r\n            <!-- Text Input Submenu -->\r\n            <app-text-input-submenu\r\n              *ngSwitchCase=\"'text-input-submenu'\"\r\n              [title]=\"getTextInputSubmenuPayload(index).title || ''\"\r\n              [textInputLabel]=\"getTextInputSubmenuPayload(index).textInputLabel || ''\"\r\n              [initialText]=\"getTextInputSubmenuPayload(index).initialText || ''\"\r\n              [placeholder]=\"getTextInputSubmenuPayload(index).placeholder || ''\"\r\n              [buttonText]=\"getTextInputSubmenuPayload(index).buttonText || ''\"\r\n              (menuAction)=\"handleSubmenuAction($event)\"\r\n              (close)=\"closeSubmenu()\"\r\n            ></app-text-input-submenu>\r\n\r\n            <!-- Confirmation Submenu -->\r\n            <app-confirmation-submenu\r\n              *ngSwitchCase=\"'confirmation-submenu'\"\r\n              [title]=\"getConfirmationSubmenuPayload(index).title || ''\"\r\n              [confirmationMessage]=\"getConfirmationSubmenuPayload(index).confirmationMessage || ''\"\r\n              [buttonText]=\"getConfirmationSubmenuPayload(index).buttonText || ''\"\r\n              (menuAction)=\"handleSubmenuAction($event)\"\r\n              (close)=\"closeSubmenu()\"\r\n            ></app-confirmation-submenu>\r\n\r\n            <!-- Background Selection Submenu -->\r\n            <app-background-selection-submenu\r\n              *ngSwitchCase=\"'background-selection-submenu'\"\r\n              [title]=\"getBackgroundSelectionSubmenuPayload(index).title || ''\"\r\n              [colorId]=\"getBackgroundSelectionSubmenuPayload(index).colorId || null\"\r\n              [colorSelectionHeader]=\"getBackgroundSelectionSubmenuPayload(index).colorSelectionHeader || ''\"\r\n              [buttonText]=\"getBackgroundSelectionSubmenuPayload(index).buttonText || ''\"\r\n              (menuAction)=\"handleSubmenuAction($event)\"\r\n              (close)=\"closeSubmenu()\"\r\n            ></app-background-selection-submenu>\r\n\r\n            <!-- Color Selection Submenu -->\r\n            <app-color-selection-submenu\r\n              *ngSwitchCase=\"'color-selection-submenu'\"\r\n              [title]=\"getColorSelectionSubmenuPayload(index).title || ''\"\r\n              [colorId]=\"getColorSelectionSubmenuPayload(index).colorId || null\"\r\n              [buttonText]=\"getColorSelectionSubmenuPayload(index).buttonText || ''\"\r\n              (menuAction)=\"handleSubmenuAction($event)\"\r\n              (close)=\"closeSubmenu()\"\r\n            ></app-color-selection-submenu>\r\n\r\n            <!-- Dropdown Submenu -->\r\n            <app-dropdown-submenu\r\n              *ngSwitchCase=\"'dropdown-submenu'\"\r\n              [title]=\"getDropdownSubmenuPayload(index).title || ''\"\r\n              [dropdownInputLabel]=\"getDropdownSubmenuPayload(index).dropdownInputLabel || ''\"\r\n              [dropdownItems]=\"getDropdownSubmenuPayload(index).dropdownItems || []\"\r\n              [dropdownPlaceholderText]=\"getDropdownSubmenuPayload(index).dropdownPlaceholderText || ''\"\r\n              [buttonText]=\"getDropdownSubmenuPayload(index).buttonText || ''\"\r\n              (menuAction)=\"handleSubmenuAction($event)\"\r\n              (close)=\"closeSubmenu()\"\r\n            ></app-dropdown-submenu>\r\n\r\n            <!-- Generate Board Submenu -->\r\n            <app-generate-board-submenu\r\n              *ngSwitchCase=\"'generate-board-submenu'\"\r\n              [title]=\"getGenerateBoardSubmenuPayload(index).title || ''\"\r\n              [textInputLabel]=\"getGenerateBoardSubmenuPayload(index).textInputLabel || ''\"\r\n              [initialText]=\"getGenerateBoardSubmenuPayload(index).initialText || ''\"\r\n              [placeholder]=\"getGenerateBoardSubmenuPayload(index).placeholder || ''\"\r\n              [colorSelectionHeader]=\"getGenerateBoardSubmenuPayload(index).colorSelectionHeader || ''\"\r\n              [buttonText]=\"getGenerateBoardSubmenuPayload(index).buttonText || ''\"\r\n              [colorId]=\"getGenerateBoardSubmenuPayload(index).colorId || null\"\r\n              (menuAction)=\"handleSubmenuAction($event)\"\r\n              (close)=\"closeSubmenu()\"\r\n            ></app-generate-board-submenu>\r\n\r\n            <!-- Default Case -->\r\n            <div *ngSwitchDefault>\r\n              Unknown submenu type: {{ submenuItem.submenu.type }}\r\n            </div>\r\n          </ng-container>\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-e24ab801878b99590e07dfba34d91679dadef5138eff1f7c6402e6d9c9bff62d61a5936cb2b5b1e957996baee438b806678c2ee6cac7057d002849a3481c7ebf",
            "file": "src/app/shared/components/navbar/navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navbar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./navbar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-navbar',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './navbar.component.html',\r\n  styleUrl: './navbar.component.scss'\r\n})\r\nexport class NavbarComponent {\r\n\r\n}\r\n",
            "styleUrl": "./navbar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>navbar works!</p>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: #1ea7fd;\n  text-decoration: none;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #66bf3c;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ProjectComponent",
            "id": "component-ProjectComponent-cf061e466b0e373679a0af275c0ccdd615296db09a76bc2de16acb6f5f0cabdb8dbe1355a89d140d80931166ced7ea346855b78ae59d9006288ab4eef3d1fad0",
            "file": "src/app/project/project.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-project",
            "styleUrls": [
                "./project.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./project.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "auth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "description",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "tickets",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Ticket[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteTicket",
                    "args": [
                        {
                            "name": "ticketId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ticketId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTickets",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitTicket",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleEditMode",
                    "args": [
                        {
                            "name": "ticket",
                            "type": "Ticket",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ticket",
                            "type": "Ticket",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTicket",
                    "args": [
                        {
                            "name": "ticket",
                            "type": "Ticket",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ticket",
                            "type": "Ticket",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MaterialSharedModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { environment } from '../../environments/environment';\r\nimport { UtilsService } from '../shared/utils/utils.service';\r\nimport { AuthService } from '@auth0/auth0-angular';\r\nimport { MaterialSharedModule } from '../shared/material/material.shared';\r\n\r\ninterface Ticket {\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  isEditing?: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-project',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule, MaterialSharedModule],\r\n  templateUrl: './project.component.html',\r\n  styleUrls: ['./project.component.scss'],\r\n})\r\nexport class ProjectComponent implements OnInit {\r\n  description: string = '';\r\n  title: string = '';\r\n  tickets: Ticket[] = [];\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private utilsService: UtilsService,\r\n    public auth: AuthService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.getTickets(); // Fetch tickets when the component is initialized\r\n  }\r\n\r\n  // Toggle edit mode for a specific ticket\r\n  toggleEditMode(ticket: Ticket) {\r\n    ticket.isEditing = !ticket.isEditing;\r\n  }\r\n\r\n  // Save changes to the ticket (HTTP PUT request)\r\n  updateTicket(ticket: Ticket) {\r\n    const updatedTicket = {\r\n      title: ticket.title,\r\n      description: ticket.description,\r\n      updatedAt: new Date(),\r\n    };\r\n\r\n    this.http\r\n      .put(`${environment.baseURL}/tickets/${ticket.id}`, updatedTicket, {\r\n        withCredentials: true, // Include cookies in the request\r\n      })\r\n      .subscribe({\r\n        next: (response) => {\r\n          console.log('Ticket updated successfully:', response);\r\n          ticket.isEditing = false; // Exit edit mode after saving\r\n          this.getTickets(); // Refresh tickets list\r\n        },\r\n        error: (error) => {\r\n          console.log('Failed to update ticket:', error);\r\n        },\r\n      });\r\n  }\r\n\r\n  deleteTicket(ticketId: number) {\r\n    this.http\r\n      .delete(`${environment.baseURL}/tickets/${ticketId}`, {\r\n        withCredentials: true, // Include cookies in the request\r\n      })\r\n      .subscribe({\r\n        next: (response) => {\r\n          console.log(\r\n            `Ticket with ID ${ticketId} deleted successfully:`,\r\n            response\r\n          );\r\n          this.getTickets();\r\n        },\r\n        error: (error) => {\r\n          console.log(`Failed to delete ticket with ID ${ticketId}`, error);\r\n        },\r\n      });\r\n  }\r\n\r\n  submitTicket() {\r\n    const ticketData = {\r\n      title: this.title,\r\n      description: this.description,\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n    };\r\n\r\n    this.http\r\n      .post(`${environment.baseURL}/tickets`, ticketData, {\r\n        withCredentials: true, // Include cookies in the request\r\n      })\r\n      .subscribe({\r\n        next: (response) => {\r\n          console.log('Ticket added successfully:', response);\r\n          this.getTickets();\r\n          // Reset the form fields\r\n          this.title = '';\r\n          this.description = '';\r\n        },\r\n        error: (error) => {\r\n          console.log('Failed to add ticket:', error);\r\n        },\r\n      });\r\n  }\r\n\r\n  getTickets() {\r\n    this.auth.getAccessTokenSilently().subscribe((token) => {\r\n      console.log('Access Token:', token);\r\n    });\r\n\r\n    this.auth.isAuthenticated$.subscribe((isAuthenticated) => {\r\n      console.log('User is authenticated:', isAuthenticated);\r\n    });\r\n\r\n    this.http\r\n      .get<Ticket[]>(`${environment.baseURL}/tickets`, {\r\n        withCredentials: true, // Include cookies in the request\r\n      })\r\n      .subscribe({\r\n        next: (data) => {\r\n          this.tickets = data.map((ticket) => ({\r\n            ...ticket,\r\n            isEditing: false, // Initialize edit mode to false\r\n          }));\r\n        },\r\n        error: (error) => {\r\n          console.log('An error occurred while fetching data', error);\r\n        },\r\n      });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-container {\r\n  display: flex;\r\n  flex-direction: column; /* Stack elements vertically */\r\n  gap: 1rem; /* Optional: Adds space between fields */\r\n}\r\n\r\n.full-width {\r\n  width: 100%;\r\n}\r\n\r\n.project-page {\r\n  display: flex;\r\n  flex-direction : column;\r\n  align-items: center;\r\n  padding-bottom : 3rem;\r\n}\r\n\r\n.tickets-container {\r\n  max-width : 600px;\r\n  display: flex;\r\n  flex-direction : column;\r\n  gap : 3rem;\r\n  padding : 1rem;\r\n}\r\n\r\n.ticket-card {\r\n  margin-bottom : 2rem;\r\n}\r\n\r\n",
                    "styleUrl": "./project.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"project-page\">\r\n  <div class = \"tickets-container\">\r\n<div class=\"ticket-form\">\r\n  <h2>Create a New Ticket</h2>\r\n  <form (ngSubmit)=\"submitTicket()\">\r\n    <div class=\"form-container\">\r\n      <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n        <mat-label>Title</mat-label>\r\n        <input matInput id=\"title\" [(ngModel)]=\"title\" name=\"title\" required />\r\n      </mat-form-field>\r\n    \r\n      <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n        <mat-label>Description</mat-label>\r\n        <textarea\r\n          matInput\r\n          id=\"description\"\r\n          [(ngModel)]=\"description\"\r\n          name=\"description\"\r\n          required\r\n        ></textarea>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div class=\"form-actions\">\r\n      <button mat-raised-button color=\"primary\" type=\"submit\">Submit Ticket</button>\r\n    </div>\r\n  </form>\r\n</div>\r\n\r\n<div class=\"ticket-form ticket-list\">\r\n  <h2>Your Tickets</h2>\r\n  <mat-card *ngFor=\"let ticket of tickets\" class=\"ticket-card\">\r\n    <div *ngIf=\"!ticket.isEditing\">\r\n      <mat-card-header>\r\n        <mat-card-title>{{ ticket.title }}</mat-card-title>\r\n        <mat-card-subtitle>\r\n          <small>Updated at: {{ ticket.updatedAt | date: 'short' }}</small>\r\n        </mat-card-subtitle>\r\n      </mat-card-header>\r\n\r\n      <mat-card-content>\r\n        <p>{{ ticket.description }}</p>\r\n      </mat-card-content>\r\n\r\n      <mat-card-actions>\r\n        <button mat-button (click)=\"toggleEditMode(ticket)\">Edit</button>\r\n        <button mat-button color=\"warn\" (click)=\"deleteTicket(ticket.id)\">Delete</button>\r\n      </mat-card-actions>\r\n    </div>\r\n\r\n    <div *ngIf=\"ticket.isEditing\">\r\n      <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n        <mat-label>Edit Title</mat-label>\r\n        <input matInput [(ngModel)]=\"ticket.title\" name=\"editTitle\" />\r\n      </mat-form-field>\r\n\r\n      <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n        <mat-label>Edit Description</mat-label>\r\n        <textarea matInput [(ngModel)]=\"ticket.description\" name=\"editDescription\"></textarea>\r\n      </mat-form-field>\r\n\r\n      <mat-card-actions>\r\n        <button mat-raised-button color=\"primary\" (click)=\"updateTicket(ticket)\">Save</button>\r\n        <button mat-button (click)=\"toggleEditMode(ticket)\">Cancel</button>\r\n      </mat-card-actions>\r\n    </div>\r\n  </mat-card>\r\n</div>\r\n</div>\r\n</div>\r\n"
        },
        {
            "name": "TextInputSubmenuComponent",
            "id": "component-TextInputSubmenuComponent-984f9c8920b570816f3676012f023bd0126d7223b646d26bf818cd712bbbd2bfe3b499829b401f544f251ed4686872cd1b1d9808f0d5271f6cbc8589d60ba71b",
            "file": "src/app/shared/components/text-input-submenu/text-input-submenu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-text-input-submenu",
            "styleUrls": [
                "./text-input-submenu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./text-input-submenu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "buttonText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "initialText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "textInputLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter"
                },
                {
                    "name": "menuAction",
                    "defaultValue": "new EventEmitter<TextInputSubmenuOutput>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "textInputValue",
                    "defaultValue": "this.initialText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "onActionClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCloseClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core'\r\nimport { FormsModule } from '@angular/forms'\r\nimport { CommonModule } from '@angular/common'\r\nimport {\r\n  TextInputSubmenuInput,\r\n  TextInputSubmenuOutput,\r\n} from '../../models/submenuInputOutput.model'\r\n\r\n@Component({\r\n  selector: 'app-text-input-submenu',\r\n  templateUrl: './text-input-submenu.component.html',\r\n  styleUrls: ['./text-input-submenu.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n})\r\nexport class TextInputSubmenuComponent implements TextInputSubmenuInput {\r\n  // Inputs based on TextInputSubmenuInput\r\n  @Input() title: string = ''\r\n  @Input() textInputLabel: string = ''\r\n  @Input() initialText: string = '' // Optional initial text for prefill\r\n  @Input() placeholder: string = ''\r\n  @Input() buttonText: string = ''\r\n\r\n  // Outputs\r\n  @Output() menuAction = new EventEmitter<TextInputSubmenuOutput>()\r\n  @Output() close = new EventEmitter<void>()\r\n\r\n  // Component State\r\n  textInputValue: string = this.initialText // Initialize with initialText if provided\r\n\r\n  // Handle action button click\r\n  onActionClicked() {\r\n    // Emit the menu action with the specified structure\r\n    this.menuAction.emit({ text: this.textInputValue })\r\n    // Close the submenu\r\n    this.close.emit()\r\n  }\r\n\r\n  // Handle close button click\r\n  onCloseClicked() {\r\n    this.close.emit()\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n@import '../../../assets/styles/main.scss';\r\n\r\n.submenu-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 16px;\r\n  background-color: $neutral-lighter;\r\n  border-radius: 8px;\r\n  width: 300px;\r\n}\r\n\r\n.submenu-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  h2 {\r\n    margin: 0;\r\n  }\r\n\r\n  .close-button {\r\n    background: none;\r\n    border: none;\r\n    font-size: 24px;\r\n    cursor: pointer;\r\n  }\r\n}\r\n\r\n.input-group {\r\n  margin-top: 16px;\r\n\r\n  label {\r\n    display: block;\r\n    margin-bottom: 8px;\r\n    font-weight: bold;\r\n  }\r\n\r\n  input[type='text'] {\r\n    width: 100%;\r\n    padding: 8px;\r\n    border: 1px solid $neutral-darker;\r\n    border-radius: 4px;\r\n  }\r\n}\r\n\r\n.action-button-group {\r\n  margin-top: 16px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n\r\n  button {\r\n    padding: 8px 16px;\r\n    background-color: $primary;\r\n    color: $secondary;\r\n    border: none;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n  }\r\n}\r\n",
                    "styleUrl": "./text-input-submenu.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "TextInputSubmenuInput"
            ],
            "templateData": "<div class=\"submenu-container\">\r\n  <!-- Header with title and close button -->\r\n  <div class=\"submenu-header\">\r\n    <h2>{{ title }}</h2>\r\n    <button class=\"close-button\" (click)=\"onCloseClicked()\">×</button>\r\n  </div>\r\n\r\n  <!-- Text input section -->\r\n  <div class=\"input-group\">\r\n    <label for=\"textInput\">{{ textInputLabel }}</label>\r\n    <input\r\n      id=\"textInput\"\r\n      type=\"text\"\r\n      [(ngModel)]=\"textInputValue\"\r\n      [placeholder]=\"placeholder\"\r\n    />\r\n  </div>\r\n\r\n  <!-- Action button -->\r\n  <div class=\"action-button-group\">\r\n    <button (click)=\"onActionClicked()\">\r\n      {{ buttonText }}\r\n    </button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "TicketComponent",
            "id": "component-TicketComponent-c35a7fe7ab6950ae6be6935f3285d7f760e9ef14a4e30c8d6a7f4dcf6226ada53235c042c41c98973203645420f4607377c3d28b164280eb81f75630d76fdbd2",
            "file": "src/app/features/ticket-page/ticket/ticket.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-ticket",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./ticket.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-ticket',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './ticket.component.html',\r\n  styleUrl: './ticket.component.scss'\r\n})\r\nexport class TicketComponent {\r\n\r\n}\r\n",
            "styleUrl": "./ticket.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>ticket works!</p>\r\n"
        },
        {
            "name": "WelcomePageComponent",
            "id": "component-WelcomePageComponent-3579175d88fe1c1310cb1a8a9540caad690b5972a9a03719c7cf2db0f35397c49cbfd9bf77379065b2b3602873099a6a1284d20116fabc11ca0d710b9799304e",
            "file": "src/app/features/welcome-page/welcome-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-welcome-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./welcome-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-welcome-page',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './welcome-page.component.html',\r\n  styleUrl: './welcome-page.component.scss'\r\n})\r\nexport class WelcomePageComponent {\r\n\r\n}\r\n",
            "styleUrl": "./welcome-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>Welcome to Ticketer</p>\r\n"
        }
    ],
    "modules": [
        {
            "name": "MaterialSharedModule",
            "id": "module-MaterialSharedModule-12fe3e1c896b744131c680a7b0a68d67e3583ac8122768176a5f7a3548e445c6c64dce1b51adb19d82432a194ab57456706c66180e2a89c80c8c16f27ee224f5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/material/material.shared.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core'\r\nimport { MatButtonModule } from '@angular/material/button'\r\nimport { MatCardModule } from '@angular/material/card'\r\nimport { MatInputModule } from '@angular/material/input'\r\nimport { MatToolbarModule } from '@angular/material/toolbar'\r\nimport { MatIconModule } from '@angular/material/icon'\r\nimport { MatDialogModule } from '@angular/material/dialog'\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar'\r\nimport { MatListModule } from '@angular/material/list'\r\nimport { MatMenuModule } from '@angular/material/menu'\r\nimport { MatFormFieldModule } from '@angular/material/form-field'\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner'\r\nimport { MatTooltipModule } from '@angular/material/tooltip'\r\n\r\n@NgModule({\r\n  exports: [\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatInputModule,\r\n    MatToolbarModule,\r\n    MatIconModule,\r\n    MatDialogModule,\r\n    MatSnackBarModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatFormFieldModule,\r\n    MatProgressSpinnerModule,\r\n    MatTooltipModule,\r\n  ],\r\n})\r\nexport class MaterialSharedModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  baseURL: 'http://localhost:5202/api', // Adjust the port if necessary\r\n  auth: {\r\n    domain: 'dev-3l5ve3any1ptgo1l.us.auth0.com',\r\n    clientId: 'WQgTojZX4xgLtAoeVffbMiIyV3Z2QK0v',\r\n    audience: 'https://ticketer-api',\r\n    redirect_uri: window.location.origin,\r\n    errorPath: '/error',\r\n  },\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "SubmenuInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "TextInputSubmenuInput | ConfirmationSubmenuInput | BackgroundSelectionSubmenuInput | GenerateBoardSubmenuInput | ColorSelectionSubmenuInput | DropdownSubmenuInput | CreateBoardItemSubmenuInput",
                "file": "src/app/shared/models/submenuInputOutput.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "SubmenuOutput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "TextInputSubmenuOutput | ConfirmationSubmenuOutput | BackgroundSelectionSubmenuOutput | GenerateBoardSubmenuOutput | ColorSelectionSubmenuOutput | DropdownSubmenuOutput | CreateBoardItemSubmenuOutput",
                "file": "src/app/shared/models/submenuInputOutput.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "SubmenuTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"text-input-submenu\" | \"confirmation-submenu\" | \"background-selection-submenu\" | \"generate-board-submenu\" | \"color-selection-submenu\" | \"dropdown-submenu\" | \"create-board-item-submenu\"",
                "file": "src/app/shared/models/submenuInputOutput.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  baseURL: 'http://localhost:5202/api', // Adjust the port if necessary\r\n  auth: {\r\n    domain: 'dev-3l5ve3any1ptgo1l.us.auth0.com',\r\n    clientId: 'WQgTojZX4xgLtAoeVffbMiIyV3Z2QK0v',\r\n    audience: 'https://ticketer-api',\r\n    redirect_uri: window.location.origin,\r\n    errorPath: '/error',\r\n  },\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/shared/models/submenuInputOutput.model.ts": [
                {
                    "name": "SubmenuInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "TextInputSubmenuInput | ConfirmationSubmenuInput | BackgroundSelectionSubmenuInput | GenerateBoardSubmenuInput | ColorSelectionSubmenuInput | DropdownSubmenuInput | CreateBoardItemSubmenuInput",
                    "file": "src/app/shared/models/submenuInputOutput.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "SubmenuOutput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "TextInputSubmenuOutput | ConfirmationSubmenuOutput | BackgroundSelectionSubmenuOutput | GenerateBoardSubmenuOutput | ColorSelectionSubmenuOutput | DropdownSubmenuOutput | CreateBoardItemSubmenuOutput",
                    "file": "src/app/shared/models/submenuInputOutput.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "SubmenuTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"text-input-submenu\" | \"confirmation-submenu\" | \"background-selection-submenu\" | \"generate-board-submenu\" | \"color-selection-submenu\" | \"dropdown-submenu\" | \"create-board-item-submenu\"",
                    "file": "src/app/shared/models/submenuInputOutput.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 6,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/auth-interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "src/app/core/services/board.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BoardService",
                "coveragePercent": 66,
                "coverageCount": "6/9",
                "status": "good"
            },
            {
                "filePath": "src/app/core/services/color.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ColorService",
                "coveragePercent": 40,
                "coverageCount": "2/5",
                "status": "medium"
            },
            {
                "filePath": "src/app/core/services/error-handling.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ErrorHandlingService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/list.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ListService",
                "coveragePercent": 66,
                "coverageCount": "6/9",
                "status": "good"
            },
            {
                "filePath": "src/app/core/services/ticket.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TicketService",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "src/app/core/services/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 50,
                "coverageCount": "3/6",
                "status": "medium"
            },
            {
                "filePath": "src/app/features/board-page/board/board.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard-page/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/features/ticket-page/ticket/ticket.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TicketComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/welcome-page/welcome-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WelcomePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/project/project.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/project/project.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Ticket",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/background-selection-panel/background-selection-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BackgroundSelectionPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/background-selection-submenu/background-selection-submenu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BackgroundSelectionSubmenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/color-selection-panel/color-selection-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorSelectionPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/color-selection-submenu/color-selection-submenu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorSelectionSubmenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/confirmation-submenu/confirmation-submenu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmationSubmenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/create-board-item-submenu/create-board-item-submenu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateBoardItemSubmenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/dropdown-submenu/dropdown-submenu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownSubmenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/generate-board-submenu/generate-board-submenu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenerateBoardSubmenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/guest-data-dialog/guest-data-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GuestDataDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/navbar/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/text-input-submenu/text-input-submenu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextInputSubmenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/board.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BoardRequestBase",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/board.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateBoardRequest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/board.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateDuplicateBoardRequest",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/board.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GetAllBoardsDetailsResponse",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/board.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GetBoardFullDetailsResponse",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/board.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateBoardRequest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/color.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GetColorsResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateDuplicateListRequest",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateListRequest",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GetAllListsDetailsResponse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ListDetailsBase",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateListPositionRequest",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateListRequest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/menu.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MenuConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/menu.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SubmenuTransfer",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/submenuInputOutput.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BackgroundSelectionSubmenuInput",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/submenuInputOutput.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BackgroundSelectionSubmenuOutput",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/submenuInputOutput.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ColorSelectionSubmenuInput",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/submenuInputOutput.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ColorSelectionSubmenuOutput",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/submenuInputOutput.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfirmationSubmenuInput",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/submenuInputOutput.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfirmationSubmenuOutput",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/submenuInputOutput.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateBoardItemSubmenuInput",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/submenuInputOutput.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateBoardItemSubmenuOutput",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/submenuInputOutput.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DropdownSubmenuInput",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/submenuInputOutput.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DropdownSubmenuOutput",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/submenuInputOutput.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GenerateBoardSubmenuInput",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/submenuInputOutput.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GenerateBoardSubmenuOutput",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/submenuInputOutput.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TextInputSubmenuInput",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/submenuInputOutput.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TextInputSubmenuOutput",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/submenuInputOutput.model.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "SubmenuInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/submenuInputOutput.model.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "SubmenuOutput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/submenuInputOutput.model.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "SubmenuTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/ticket.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateTicketRequest",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/ticket.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GetTicketDetailsResponse",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/ticket.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateTicketPositionRequest",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/ticket.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateTicketRequest",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/utils.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UtilsService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}